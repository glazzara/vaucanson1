-*- outline -*-

* Pourquoi share/ ?
Ce répertoire cherche à fédérer les différents fichiers (LaTeX,
BibTeX, Make etc.) qui sont utilisés pour écrire nos articles,
rapports, présentations etc.

Pour une utilisation normale, ne surtout pas dépendre de lui « par
l'extérieur », du genre `-I ../share/styles' depuis votre dossier, car
alors si dans le futur un changement incompatible a lieu (e.g., clef
BibTeX qui change), alors votre document ne compilera plus.  Pour
éviter ce défaut, exécutez share/bin/update-share depuis votre
répertoire de travail : une indirection (svn:externals) sera installée
dans votre répertoire vers la version *courante* de share .  Cette
indirection portant le numéro courant de révision de share/, il n'y a
aucun risque que dans le futur il ne soit pas compatible avec votre
document.

** Pour augmenter le contenu de share
Choisissez de travailler soit dans le vrai "maître", i.e.,

     https://svn.lrde.epita.fr/svn/lrde-publis/trunk/share

soit dans votre checkout local.  Dans les deux cas, faire un "svn up"
pour être certain de travailler sur la version courante.  Une fois les
changements faits, comme d'habitude, un ChangeLog, un commit, un post
dans lrde-patches@lrde.epita.fr.

Depuis votre projet embarquant share/ vous pouvez aussi faire

     make share-ci

qui utilise vcs pour faire un checkin de share/, puis update-share
pour mettre à jour la dépendance de votre projet hôte.

** Pour mettre à jour votre version local de share/
Si votre Makefile inclut share/bin/share.mk, alors taper "make
share-up" le fera pour vous.  Sinon, à la main, faire
"share/bin/update-share".  Ne pas oublier de faire un checkin de votre
répertoire de travail, sinon la mise à jour de la dépendance sur
share/ reste locale à votre répertoire de travail.

* share/bin
** beamer2handout
Un script au dessus de pdfnup (disponible dans le paquet Debian
pdfjam) pour produire des polycopiés (handouts) à partir de fichiers
Beamer PDF. Remplace feu beamer-handout.

** latin2tex
Convertir les accents des fichiers donnés en ligne de commande de
latin 1 vers TeX.  Ressemble à recode, mais ne change pas les {, les \
etc.  Pratique pour normaliser les fichiers BibTeX.

** make-bib.pl
Un script qui engendre la biblio du labo.

** svnci, svndiff
Deux petits scripts qui facilitent l'utilisation de svn.  Utilisés
pour gérer la biblio du labo.

** texi2dvi
Une version récente qui sache compiler dans un sous-répertoire comme
tmp.t2d, et évite les problèmes quand on fait à la fois du DVI et du
PDF.  Début de support pour le HTML.

** update-share
Met à jour la dépendant vis-à-vis de share.  Typiquement appelé par
"make share-up".  Il est utile de l'appeler directement pour créer une
dépendance sur share avec numéro de révision (svn:externals).


* share/bib
Les bibliographies en BibTeX utilisées au labo, y compris le maître de
lrde.bib.  Merci de les exploiter et de les augmenter.  Pour que cela
fonctionne correctement en non Latin 1, se contraindre à des accents
LaTeX, pas de caractères accentués.  bin/latin2tex aide à faire la
conversion.

Essayer de maintenir les clefs selon la convention LRDE :
<nom-premier-auteur>.<annnée>.<sigle> (où le <sigle> est celui de la
conf, du livre etc.).  Pour les pages www, utiliser "<projet>.www".
Merci de garder les fichiers triés et justifiés comme Emacs sait le
faire.  Pour éviter les problèmes avec les cross-références (bibtex
veut les voir après les appels), utiliser "XXXref.<année>.<sigle>".
Ne pas normaliser les .bib qui viennent verbatim de l'internet et sont
maintenus (tels que ceux de E. Visser), puisque le travail serait à
reprendre sans arrêt.

** kernighan.bib
La biblio de Brian Kernighan, depuis
<URL:http://netlib.bell-labs.com/cm/cs/bib/bwk.bib>.

** model-checking.bib
Model checking, probabiliste ou non.

** sensor-networks.bib

* share/make
Morceaux de Makefile qui vont bien.

** dist.mk
Fournit les cibles "dist", "distdir", et "distcheck" comparables à
celles d'Automake, en moins puissant bien sûr.  Définir data_DATA
et/ou EXTRA_DIST pour spécifier ce qu'il faut inclure.  "share" et
Makefile sont inclus systématiquement.

** figs-pdf.mk
Des règles de conversion depuis un certain nombre de formats de figure
(Dia, Dot etc.) vers PDF, voire PNG dans le cas de Dia (la conversion
vers PDF échoue).

Exporte aussi des fonctions GNU Make utiles.

*** share_convert_to_pdf FILES
Convertit les extensions reconnues des FILES vers pdf.  Exemple
d'utilisation:

FIGS_PDF = $(notdir $(call share_convert_to_pdf,$(DOCUMENT_IMAGES)))

** share.mk
Le minimum syndical pour utiliser share/.  Une target "update" pour
mettre à jour share/.  Définir share_dir = path/to/share avant.

** share-am.mk
Le même, mais à utiliser quand inclus dans un Makefile.am au lieu de
Makefile.

** tex.mk
De quoi compiler du *.tex ou *.ltx vers du *.dvi, *.pdf, ou *.html.

*** rev.tex
tex.mk permet aussi de constuire "rev.tex" si vous le souhaitez, qui
contient le numéro de révision du ChangeLog (s'il est possible de
l'obtenir) dans la macro \SvnRev.  Faire par exemple :

     article.pdf: rev.tex

pour que ça fonctionne.

Il cherche $(ChangeLog) qui vaut "ChangeLog" par défaut.

** share/make/handout.mk
Définit des cibles supplémentaires pour créer des polycopiés
(handouts), au format A4 (suffixe `-handout.pdf') ou au format livret
A4 (suffixe `-handout-4.pdf').

* share/styles
Ce répertoire fournit des styles courants mais pas omniprésents (e.g.,
qtree, bibunits etc.), des paquets pratiques mais rares (e.g., texi,
bilan), mais également des wrappers pour certains paquetages de façon
à les "améliorer" (listings -> mylistings).  Dans ce dernier cas, on
ajoute :

- des alarmes pour les ordres dangereux
- des paramètres par défaut pour les cas courants
- un support étendu (plus de langages etc.)

On essaie aussi de fournir un support pour HeVeA.  C'est un peu
pénible, voir l'item HeVeA.

** curve.cls 1.10.
Pour faire son CV.
http://www.lrde.epita.fr/~didier/comp/development/software.php#curve

** IEEEtran.cls, IEEEtran.bst
Le style ACM/IEEE.  Pour la doc,
cf. <URL:http://computer.org/cspress/instruct.htm> ou
/mnt/doc/comp/text/latex/IEEEtran_HOWTO.pdf.

** latex8.bst, latex8.sty
IEEE 8.5 x 11-Inch Proceedings Style `latex8.sty'.  Et son style
BibTeX.  Documenté dans /mnt/doc/comp/text/latex/latex8.pdf et
/mnt/doc/comp/text/latex/latex8.tex.

** lrde-bulletin.sty
Le style utilisé pour L'air de rien. Remplace GRASSnews.sty.

** mybabel
L'utiliser avec les langues en options, comme le vrai.  Il vaut mieux
l'appeler en premier pour éviter les conflits par la suite.

** myacronyms
Les acronymes les plus utilisés au labo.

** myhyperref
Définit ce qu'il faut pour que \autoref marche bien.  Mieux vaut
l'inclure parmi les derniers.  Si \IsAFinal est défini, les liens sont
en noirs (plus adéquat pour l'impression), sinon en bleu.

** mylisting
Emballe listing.sty pour qu'il fonctionne correctement dans les cas
attendus.

*** Nouveaux langages
- ATerm pour les ATerms
- Box pour les formules Box
- HIR, langage intermédiaire d'Appel.
- [Mips]Assembler,
- parse-testsuite (Stratego/XT)
- {Reactive Modules}, [Extended]{Reactive Modules}
- RTG, Regular Tree Grammar (Stratego/XT)
- SDF, [Boxed]SDF, [AG]SDF
- STL (C++ + typedef de stl)
- Stratego
- [Appel]Tiger, [EPITA]Tiger (dialecte par défaut)
- Vaucanson (STL + typedef et structures de contrôle de Vcn)
- Yacc, [Bison]Yacc (aka Bison)

*** Nouveaux environnements
- asgsdf
- boxedsdf
- sdf

*** Nouveaux lst styles
- box, plutôt pour le papier, sur fond légèrement grisé.
- ttcolor, plutôt pour les transparents

** prooftree
Un environnement LaTeX pour faire des arbres de preuve.

** texi
Un style écrit par Didier pour avoir des commandes sémantiques comme
en Texinfo :

  abbr::          Indicating abbreviations.
  acronym::       Indicating acronyms.
  code::          Indicating program code.
  command::       Indicating command names.
  dfn::           Specifying definitions.
  email::         Indicating an electronic mail address.
  env::           Indicating environment variables.
  file::          Indicating file names.
  indicateurl::   Indicating an example URL.
  kbd::           Showing keyboard input.
  key::           Specifying keys.
  link{ulr, title} ou link{url}
  option::        Indicating option names.
  samp::          Indicating a literal sequence of characters.
  strong::        Strong emphasis.
  var::           Indicating metasyntactic variables.
  verb::          Indicating a verbatim sequence of characters.


* Utilisation d'HeVeA
Lorsqu'un document fait un \usepackage{foo}, si foo.hva existe, il est
lu *sinon c'est tout*.  En particulier HeVeA ne tente même pas de lire
foo.sty.  Du coup, pour les cas les plus courants, il faut implémenter
un foo.hva, qui est un fichier en syntaxe LaTeX : seules quelques
commandes sont absentes.  En conséquence un fichier foo.sty et foo.hva
sont extraordinairement semblables ; trop semblables : on a envie de
les partager.  Mais dans ce cas, c'est plutôt le hva qui doit être
inclus par le sty, puisque ce dernier est plus riche en syntaxe.

On peut imaginer d'autres schémas, e.g., le sty contient des balises
\ifhevea pour gérer ce cas-là, et foo.hva se contente d'inclure
foo.sty.  Je (Akim) n'ai pas encore les idées claires sur ce qui est
le plus élégant, le plus pratique.  Je cherche, et je suis preneur
d'opinions.

Chose importante est très pénible : les fichiers hva ne sont pas
protégés en double inclusion, et RequirePackage n'existe pas en
HeVeA.  Résultat des courses, il faut faire des \usepackage, en
faisant attention de ne pas en faire deux fois.  C'est très pénible
quand on veut inclure deux fichiers qui ont la même dépendance :(
