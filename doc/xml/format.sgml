<!doctype linuxdoc system>

<article>

<title>Vaucanson XML format description
<author>Valentin David, <tt>valentin@lrde.epita.fr</tt>
<date>December 2003
<abstract>
This document describe the Vaucanson XML format.
</abstract>

<toc>

<p>
Vaucanson XML obeys to W3C XML 1.0 recommandations.

<sect>Namespace

<p>
The namespace of the Vaucanson XML format is
"http://www.lrde.epita.fr/vaucanson"

<sect>Global format

<P>
An automaton is described by its type and its content. The global
format is quit like this :

<code>
&lt;automaton>
  &lt;type>
    &lt;!-- type description -->
  &lt;/type>
  &lt;content>
    &lt;!-- content description -->
  &lt;/content>
&lt;/automaton>
</code>

<sect>Type description

<p>
Labels on transitions of automata are elements of rationnal
series. This serie is built on a monoid an a semiring. They have both
to be defined. We can have something like that :

<code>
&lt;type>
  &lt;monoid type="free" generators="letters">
    &lt;generator value="A"/>
    &lt;generator value="B"/>
  &lt;/monoid>
  &lt;semiring set="B" operations="boolean"/>
&lt;/type>
</code>

<sect1>Monoid

<p>
Monoids are defined with a <tt>type</tt> attribute and a
<tt>generators</tt> one. Generators have to be passed as children.
<tt>type</tt> can be set to "free" or "unit". <tt>generators</tt> can
be "letters", "pair", "weighted" or "integers".

<p>
Here are some example of monoids :

<code>
&lt;monoid type="free" generators="pair">
  &lt;generators value="(a,a)"/>
  &lt;generators value="(a,b)"/>
  &lt;generators value="(b,a)"/>
  &lt;generators value="(b,b)"/>
&lt;/monoid>
</code>

<code>
&lt;monoid type="free" generators="weighted">
  &lt;generators value="1x"/>
  &lt;generators value="2y"/>
  &lt;generators value="3z"/>
&lt;/monoid>
</code>

<code>
&lt;monoid type="free" generators="integers">
  &lt;generators value="1"/>
  &lt;generators value="2"/>
  &lt;generators value="4"/>
  &lt;generators value="8"/>
&lt;/monoid>
</code>

<sect1>Semiring

<p>
Semiring is defined with two attributes : <tt/set/ and
<tt/operations/. <tt/set/ describes the set where the semiring is
defined, and <tt/operations/ define the operators used. <tt/set/ can
be "B", "Z", "R", or "ratseries". When using simple sets, this
<tt/operation/ attribute can be "boolean", "numerical", "tropicalMax"
or "tropicalMin". Here is an example.

<code>
&lt;semiring set="Z" operations="tropicalMin"/>
</code>

When the semirinq is a "ratseries" one, a <tt/semiring/ and a <tt/monoid/
have to be give as children. Then the <tt/operations/ attribute can be
set to either "function" or "hadamard" or "shuffle".

<code>
&lt;semiring set="ratseries" operations="function">
  &lt;monoid type="free" generators="letters">
    &lt;generator value="A"/>
    &lt;generator value="B"/>
    &lt;generator value="C"/>
  &lt;/monoid>
  &lt;semiring set="Z" operations="numerical"/>
&lt;/semiring>
</code>

<sect>Content

<p>
The content is divided in four parts :
<itemize>
<item>the states
<item>the transitions
<item>the initial states
<item>the final states
</itemize>

<p>
Each of these parts are list of elements.

<sect1>States

<p>
States are mainly described by a name. This name is require and is
unique. According to the XML 1.0 recommandation, this name must begin
with a alphabetic letter. A optionnal label attribute can be set.

<sect1>Transitions

<p>
Transitions must refer to states as source and destination. The label
is give with a regular expression, spontaneous by default.

<sect1>Initial states and final states

<p>
Like transition but there is only one reference to a state.

<p>
Here is an example of content :
<code>
&lt;content>
  &lt;states>
    &lt;state name="a"/>
    &lt;state name="b"/>
  &lt;/states>
  &lt;transitions>
    &lt;transition src="a" dst="b" label="(2 A)*"/>
  &lt;/transitions>
  &lt;initials>
    &lt;initial state="a"/>
  &lt;/initials>
  &lt;finals>
    &lt;final state="b"/>
  &lt;/finals>
&lt;/content>
</code>


<sect>Geometry

<p>
Geometry can be passed on all stages by a <tt/geometry/ element. The geometry
is conserved to all descendant node. Geometry attribute are mainly taken
from Vancanson-G project. See the DTD for more informations.

<code>
&lt;automaton>
  &lt;geometry
    ZZSize="1cm"
  />
  &lt;type>
  &lt;content>
    &lt;states>
      &lt;state name="a">
        &lt;geometry
          x="0"
          y="0"
        />
      &lt;/state>
      &lt;state name="b">
        &lt;geometry
          x="2"
          y="0"
        />
      &lt;/state>
    &lt;/states>
    &lt;transitions>
      &lt;geometry
        curvature="edge"
      />
      &lt;transition src="a" dst="b" label="(2 A)*"/>
    &lt;/transitions>
    &lt;initials>
      &lt;initial state="a">
        &lt;geometry
          direction="W"
        />
      &lt;/initial>
    &lt;/initials>
    &lt;finals>
      &lt;final state="b">
        &lt;geometry
          direction="E"
        />
      &lt;/final>
    &lt;/finals>
  &lt;/content>
</code>

<sect>Session

<p>
Severals automata can be saved into the same XML document with sessions.
It is just a list of automata.

<code>
&lt;session>
  &lt;automaton name="automanton_1">
    &lt;!-- definition of automanton_1 -->
  &lt;/automaton>
  &lt;automaton name="automanton_2">
    &lt;!-- definition of automanton_2 -->
  &lt;/automaton>
&lt;session>
</code>

</article>
