// dumper.hcc: this file is part of the Vaucanson project.   -*- C++ -*-
//
// Vaucanson, a generic library for finite state machines.
//
// Copyright (C) 2005, 2006 The Vaucanson Group.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// The complete GNU General Public Licence Notice can be found as the
// `COPYING' file in the root directory.
//
// The Vaucanson Group consists of people listed in the `AUTHORS' file.
//
#include <vaucanson/tools/usual_io.hh>
#ifdef VCSN_USE_XML
# include <vaucanson/tools/xml_dump.hh>
#endif
#include <vaucanson/tools/dot_dump.hh>
#include <vaucanson/tools/fsm_dump.hh>
#include <vaucanson/tools/simple_dump.hh>
#include <cstring>
#include <cstdlib>
#include <string>

struct dumper
{
  enum dump_format
    {
      fmt_error,
      fmt_dot,
      fmt_fsm,
      fmt_simple,
      fmt_xml,
    };

  dump_format fmt_;

  enum dump_format
  dump_format (std::string fmt)
  {
    if (fmt == "dot")
      return fmt_dot;
    else if (fmt == "simple")
      return fmt_simple;
    else if (fmt == "xml")
      return fmt_xml;
    else if (fmt == "fsm")
      return fmt_fsm;
    else
      return fmt_error;
  }

  dumper(int argc, char **argv, int pos = 1)
  {
    fmt_ = argc > pos ? dump_format (argv[pos]) : fmt_xml;

    if (fmt_ == fmt_error
#ifndef VCSN_USE_XML
	|| fmt_ == fmt_xml
#endif
	)
      {
	std::cerr << "Usage: " << argv[0] << " ... <fmt>" << std::endl
		  << "where fmt is one of:" << std::endl
		  << "  dot : graphviz format" << std::endl
		  << "  fsm : FSM toolbox format" << std::endl
		  << "  simple : internal Vaucanson format" << std::endl
#ifdef VCSN_USE_XML
		  << "  xml : Vaucanson XML I/O format" << std::endl
#endif
	  ;
	exit(1);
      }
  }

  const char* get_fmt() const
  {
    switch(fmt_)
      {
      case fmt_dot: return "dot";
#ifdef VCSN_USE_XML
      case fmt_xml: return "xml";
#endif
      case fmt_simple: return "simple";
      case fmt_fsm: return "fsm";
      case fmt_error: abort ();
      }
    return "unknown";
  }

  void
  operator()(std::ostream& o,
	     const automaton_t& automaton,
	     const std::string& name = "automaton")
  {
    switch(fmt_)
      {
      case fmt_dot:
	vcsn::tools::dot_dump(o, automaton, name);
	break;
#ifdef VCSN_USE_XML
      case fmt_xml:
	vcsn::tools::xml_dump(o, automaton, name);
	break;
#endif
      case fmt_simple:
	vcsn::tools::simple_dump(o, automaton,
				 vcsn::io::usual_converter_poly<rat_exp_t>());
	break;
      case fmt_fsm:
	vcsn::tools::fsm_dump(o, automaton);
	break;
      case fmt_error:
	abort ();
	break;
      }
  }
};
