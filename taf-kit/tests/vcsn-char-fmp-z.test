#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2008, 2009, 2010 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-char-fmp-z

sed '/^#/d' <<EOF | vcsn-char-z --alphabet=ab edit cb.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
1
# Set a state to be final.
7
# Which state
1
1
# Add transition
3
# From and to
0
1
# Label
a+ab+{2}bb
# Add transition
3
# From and to
1
1
# Label
b
# Exit.
10
EOF

$VCSN partial-identity cb.xml > tcz.xml
res=`$VCSN eval tcz.xml abbb`
test "x$res" = "x{2} a.b.b.b"
res=`$VCSN eval tcz.xml aa`
test "x$res" = "x0"
res=`$VCSN eval tcz.xml bbb`
test "x$res" = "x{2} b.b.b"


sed '/^#/d' <<EOF | $VCSN -aletters -Aalpha edit foo.xml
# Add states
1
# Add 3 states
3
# Set a state to be initial.
5
# Which state
0
1
# Set a state to be final.
7
# Which state
2
1
# Add transition
3
# From, to, in, out, weight
0
1
ab
x
1
# Add transition
3
# From, to, in, out, weight
1
2
1
yz
2
# Add transition
3
# From, to, in, out, weight
0
1
a
1
3
# Add transition
3
# From, to, in, out, weight
1
2
b
e
4
# Add transition
3
# From, to, in, out, weight
2
1
c
1
5
# Exit.
10
EOF

res=`$VCSN eval foo.xml ab`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{12} e+{2} xyz" || test "$res" = "{2} xyz+{12} e"
res=`$VCSN eval foo.xml a`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{6} yz"
res=`$VCSN eval foo.xml abbc`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{40} xeyz"

$VCSN is-proper foo.xml

$VCSN transpose foo.xml > foot.xml

res=`$VCSN eval foot.xml ba`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{12} e+{2} zyx" || test "$res" = "{2} zyx+{12} e"
res=`$VCSN eval foot.xml a`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{6} zy"
res=`$VCSN eval foot.xml cbba`
res=`vcsn-char-z -aletters expand "$res"`
test "$res" = "{40} zyex"


sed '/^#/d' <<EOF | $VCSN -aletters -Aalpha edit foo2.xml
# Add states
1
# Add 3 states
3
# Set a state to be initial.
5
# Which state
0
1
# Set a state to be final.
7
# Which state
2
1
# Add transition
3
# From, to, in, out, weight
0
1
1
1
2
# Add transition
3
# From, to, in, out, weight
1
2
1
yz
2
# Add transition
3
# From, to, in, out, weight
0
1
a
1
3
# Add transition
3
# From, to, in, out, weight
1
2
b
e
4
# Add transition
3
# From, to, in, out, weight
2
1
c
1
5
# Exit.
10
EOF

fail1 $VCSN is-proper foo2.xml



fail1 $VCSN is-normalized foo.xml
fail1 $VCSN is-normalized foot.xml
      $VCSN normalize foo.xml \| is-normalized -


## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
writing_data1="CPAR=#A# OPAR=#B# PLUS=#C# SPACE=#D# STAR=#E# TIMES=#F# CWEIGHT=#G# OWEIGHT=#H# ZERO=#I# ONE=#J# CONCAT=#K#"
writing_data2="CPAR=@A@ OPAR=@B@ PLUS=@C@ SPACE=@D@ STAR=@E@ TIMES=@F@ CWEIGHT=@G@ OWEIGHT=@H@ ZERO=@I@ ONE=@J@ CONCAT=@K@"
sed '/^#/d' <<EOF | $VCSN -a"ab" -A"xy" -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" edit wd-ref.xml
# Exit.
10
EOF
sed '/^#/d' <<EOF | $VCSN -a"ab" -A"xy" edit wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" cat wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check predefined alphabets in help.
$VCSN --help | grep predefined
while read a l; do
  $VCSN --help | grep "\`$a'.*\`$l' as empty word"
done <<EOF
letters 1
alpha   1
digits  e
EOF
