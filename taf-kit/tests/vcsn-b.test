#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

## -------------- ##
## Input/output.  ##
## -------------- ##

sed '/^#/d' <<EOF | vcsn-b --alphabet=ab define-automaton all.xml
# Add states
1
# Add one state
1
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
0
# Add transition
3
# From and to
0
0
# Label
a+b
# Exit.
10
EOF

# Empty automaton (no states).
echo 10 | vcsn-b --alphabet=ab define-automaton empty.xml

# Two state, no final states (empty language).
sed '/^#/d' <<EOF | vcsn-b --alphabet=ab define-automaton 2snf.xml
# Add states
1
# Add two state
2
# Set a state to be initial.
5
# Which state
0
# Add transition
3
# From, to, label
0
1
a
# Add transition
3
# From, to, label
1
0
b
# Exit.
10
EOF

AUTOMATA='all.xml empty.xml 2snf.xml'

# Cannot check display.

# Check that dot accepts the output.
for a in $AUTOMATA; do
  vcsn-b dot-dump $a | dot
done

# Check that each builtin automaton can be dumped.
for a in $(vcsn-b list-automata | sed -n 's/^  * - \([-a-z0-9]*\).*/\1/p')
do
  vcsn-b dump-automaton $a \| info -
done

for a in $AUTOMATA; do
  vcsn-b identity $a >tmp.xml
  diff -uBw $a tmp.xml
done

## --------------------------------- ##
## Test and evaluation on automata.  ##
## --------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#
# are-isomorphic
#  vcsn-b are-isomorphic $a1 $a1
#! vcsn-b are-isomorphic $a1 $b1

# eval
test "$(vcsn-b eval $a1 'a')" = 0
test "$(vcsn-b eval $a1 'ab')" = 1
test "$(vcsn-b eval $a1 'aaaabbb')" = 1

# is-ambiguous
  vcsn-b is-ambiguous $ambiguous1
  vcsn-b is-ambiguous $ambiguous2
! vcsn-b is-ambiguous $non_ambiguous1

# is-complete
! vcsn-b is-complete $a1
  vcsn-b complete $a1 \| is-complete -

# is-deterministic
! vcsn-b is-deterministic $a1
  vcsn-b determinize $a1 \| is-deterministic -

# is-empty.
! vcsn-b is-empty $a1

# is-normalized.
#! vcsn-b is-normalized $a1
#  vcsn-b normalize $a1 | vcsn-b is-normalized -

# is-realtime.
! vcsn-b is-realtime $a1

# is-standard
! vcsn-b is-standard $a1
! vcsn-b is-standard $void_b_automaton
  vcsn-b standardize $a1 \| is-standard -
  vcsn-b standard -a ab "1" \| standardize - \| is-standard -

## --------------------------------- ##
## Generic algorithms for automata.  ##
## --------------------------------- ##

vcsn-b product $a1 $a1 \| identity -
vcsn-b concatenate $a1 $a1 \| identity -

vcsn-b quotient empty.xml \| is-empty -

# Ideally we would like the quotient of 2snf to be non-empty: a single
# non-final state. Right now 2snf.xml is empty because taf-kit will
# run quotient(realtime(2snf)) and realtime() includes a
# coaccessibility check.  Maybe realtime should not be called here,
# but even if it isn't is-empty will call trim() before the actual check...
vcsn-b quotient 2snf.xml \| is-empty -
vcsn-b quotient 2snf.xml \| trim - \| is-empty -

! vcsn-b quotient all.xml \| is-empty -


#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
# transpose
#  vcsn-b transpose $b_to_transpose \| are-isomorphic $b_transposed -

## --------------------------------------- ##
## Boolean automaton specific algorithms.  ##
## --------------------------------------- ##

## --------------------------------------------- ##
## Conversion between automata and expressions.  ##
## --------------------------------------------- ##

all=$(vcsn-b aut-to-exp all.xml)
test $all = '(a+b)*'
vcsn-b --alphabet=ab exp-to-aut "$all" >aut2.xml

# standard
vcsn-b -a a standard 0 \| is-standard -
vcsn-b -a a standard a \| is-standard -
vcsn-b -a ab standard 'a+b' \| is-standard -
vcsn-b -a ab standard '(a+b)*' \| is-standard -
vcsn-b -a ab standard 'a.b' \| is-standard -
vcsn-b -a ab standard '(a.b)*' \| is-standard -
vcsn-b -a ab standard '(a*.b*)*' \| is-standard -

exit 0
