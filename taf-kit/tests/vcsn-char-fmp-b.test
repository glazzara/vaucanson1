#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-char-fmp-b

## ------------------------------------ ##
## Input/output work with transducers.  ##
## ------------------------------------ ##

$VCSN cat -o DOT t1.xml | dot
$VCSN data t1.xml


## ------------------------------------- ##
## Tests and evaluation on transducers.  ##
## ------------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#  $VCSN are-isomorphic t1.xml t1.xml
      $VCSN is-subnormalized t1.xml
fail1 $VCSN is-empty t1.xml



## ------------------------------------ ##
## Generic algorithms for transducers.  ##
## ------------------------------------ ##


## Composition test on boolean transducers
  $VCSN b-composition t1.xml u1.xml > tmp1.xml
#FIXME: Disable xml diff
#  diff tmp1.xml t1.xml_compose_u1

  $VCSN u_composition t1.xml u1.xml > tmp2.xml

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
# fail1 $VCSN are-isomorphic tmp1.xml tmp2.xml

## Unambiguous composition test on boolean transducers
  $VCSN u_composition $t2 $u2 > tmp.xml

#FIXME: Disable xml diff
# diff tmp.xml $t2_ucompose_u2

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
## Inversion of t1
#  $VCSN invert t1.xml \| are-isomorphic $inverted_t1 -

  input=`$VCSN eval t1.xml abba`
  $VCSN domain t1.xml | vcsn-char-b eval - abba
  $VCSN image t1.xml > t1image.xml
# The following test must fail because input is a series and not a word...
fail1 vcsn-char-b eval t1image.xml $input
# ... so we expand it ...
  expanded_input=`vcsn-char-b -a"xy" expand $input`
# ... split it at the + (it should be yxx+yxxy) ...
  first_input=`echo "$expanded_input" | sed 's/^.*+//'`
  second_input=`echo "$expanded_input" | sed 's/+.*$//'`
# ... check the two parts are not the same ...
  test x"$first_input" != x"$second_input"
# ... and eval the image of t1.xml on both of them.
  vcsn-char-b eval t1image.xml $first_input
  vcsn-char-b eval t1image.xml $second_input

  $VCSN to-rw t1.xml

  vcsn-char-b cat a1.xml | $VCSN evaluation t1.xml - | vcsn-char-b eval - yx



# money.xml is a vending machine that can accept three kinds of coins:
#   d - ten cents
#   v - twenty cents
#   c - fifty cents
# The machine should eat 50 cents and give change if too much has
# been given.

sed '/^#/d' <<EOF | $VCSN --alphabet1=dvc --alphabet2=dvc edit money.xml
# Add states
1
# Add 7 states
7
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
5
# Add transition
3
# From, to, in, out
0
1
d
1
# Add transition
3
# From, to, in, out
1
2
d
1
# Add transition
3
# From, to, in, out
2
3
d
1
# Add transition
3
# From, to, in, out
3
4
d
1
# Add transition
3
# From, to, in, out
4
5
d
1
# Add transition
3
# From, to, in, out
0
2
v
1
# Add transition
3
# From, to, in, out
1
3
v
1
# Add transition
3
# From, to, in, out
2
4
v
1
# Add transition
3
# From, to, in, out
3
5
v
1
# Add transition
3
# From, to, in, out
4
5
v
d
# Add transition
3
# From, to, in, out
5
5
d
d
# Add transition
3
# From, to, in, out
5
5
v
v
# Add transition
3
# From, to, in, out
5
5
c
c
# Add transition
3
# From, to, in, out
0
5
c
1
# Add transition
3
# From, to, in, out
1
5
c
d
# Add transition
3
# From, to, in, out
2
5
c
v
# Add transition
3
# From, to, in, out
3
6
c
d
# Add transition
3
# From, to, in, out
4
6
c
v
# Add transition
3
# From, to, in, out
6
5
1
v
# Exit.
10
EOF

# Test a few coin sequences
for i in vddv:d c:1 vdd:0 vdv:1 dvc:dv vdc:dv vvcc:vvc; do
  in=${i%%:*}
  out=${i##*:}
  res=`$VCSN eval money.xml $in`
  res=`vcsn-char-b expand --alphabet=vdc $res`
  test "x$res" = x$out
done

# compute all the coin sequences that can return "c".
res=`$VCSN inverse money.xml \| eval - c`
res=`vcsn-char-b expand --alphabet=vdc $res`
echo $res | tr + '\n' | sort >out
cat <<EOF | cmp - out
cc
dddddc
dddvc
ddvdc
dvddc
dvvc
vdddc
vdvc
vvdc
EOF

# ltl.xml
# a simple random sub-normalized automaton

sed '/^#/d' <<EOF | $VCSN --alphabet1=ab --alphabet2=xyz edit ltl.xml
# Add states
1
# Add 3 states
3
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
2
# Add transition
3
# From, to, in, out
0
1
a
x
# Add transition
3
# From, to, in, out
0
2
a
y
# Add transition
3
# From, to, in, out
1
2
a
z
# Add transition
3
# From, to, in, out
2
1
b
x
# Exit.
10
EOF
$VCSN is-ltl ltl.xml
$VCSN ltl-to-pair ltl.xml > ltl-pair.xml
vcsn-char-char-b pair-to-fmp ltl-pair.xml > ltl2.xml
$VCSN is-ltl ltl2.xml
$VCSN aut-to-exp ltl.xml > ltl.txt
test "`cat ltl.txt`" = "((a,y)+(a,x).(a,z)).((b,x).(a,z))*" ||
test "`cat ltl.txt`" = "((a,x).(a,z)+(a,y)).((b,x).(a,z))*"

# We should use are-isomorphic here
$VCSN data ltl.xml > ltl.info
$VCSN data ltl2.xml > ltl2.info
diff ltl.info ltl2.info

# Now we will check with first_projection and second_projection
# on one side (pair), and image and domain on the other side (FMP).
$VCSN domain ltl.xml > ltl-domain.xml
$VCSN image ltl.xml > ltl-image.xml
vcsn-char-char-b first-projection ltl-pair.xml > ltl-first-projection.xml
vcsn-char-char-b second-projection ltl-pair.xml > ltl-second-projection.xml

# Now ltl-domain must be isomorph to ltl-first-projection and
# ltl-image must be isomorph to ltl-second-projection.
# FIXME: are-isomorphic disabled
vcsn-char-b are-equivalent ltl-domain.xml ltl-first-projection.xml
vcsn-char-b are-equivalent ltl-image.xml ltl-second-projection.xml
fail255 vcsn-char-b are-equivalent ltl-domain.xml ltl-second-projection.xml
fail255 vcsn-char-b are-equivalent ltl-image.xml ltl-first-projection.xml
sort ltl-domain.xml > ltl-domain-sorted.xml
sort ltl-first-projection.xml > ltl-first-projection-sorted.xml
diff ltl-domain-sorted.xml ltl-first-projection-sorted.xml
sort ltl-image.xml > ltl-image-sorted.xml
sort ltl-second-projection.xml > ltl-second-projection-sorted.xml
diff ltl-image-sorted.xml ltl-second-projection-sorted.xml

# regression test: check that ltl-to-pair fails when given a subnormalized
# automaton which is not ltl.

sed '/^#/d' <<EOF | $VCSN --alphabet1=ab --alphabet2=xy edit norm.xml
# Add states
1
# Add 2 states
2
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
1
# Add transition
3
# From, to, in, out
0
1
a
1
# Exit.
10
EOF

# This test must throw an exception (ltl-to-pair precondition).
fail255 $VCSN ltl-to-pair norm.xml > /dev/null

# Some tests on quot3base2.xml
# 1010111 is 87 (3 * 29)
# 0011101 is 29
res=`$VCSN eval quot3base2.xml 1010111 | vcsn-char-b -p'ONE=e ZERO=z ALPHABET=01' expand -`
test x"$res" = x"0011101"
# domain(quot3base2.xml) must be div3base2.xml
# FIXME: we should use are-isomorphic
$VCSN domain quot3base2.xml > quot3base2-domain.xml
vcsn-char-b cat div3base2.xml > div3base2-identity.xml
vcsn-char-b are-equivalent div3base2-identity.xml quot3base2-domain.xml
sort quot3base2-domain.xml > quot3base2-domain.sort.xml
sort div3base2-identity.xml > div3base2-identity.sort.xml
diff quot3base2-domain.sort.xml div3base2-identity.sort.xml

## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
writing_data1="CPAR=#A# OPAR=#B# PLUS=#C# SPACE=#D# STAR=#E# TIMES=#F# CWEIGHT=#G# OWEIGHT=#H# ZERO=#I# ONE=#J# CONCAT=#K#"
writing_data2="CPAR=@A@ OPAR=@B@ PLUS=@C@ SPACE=@D@ STAR=@E@ TIMES=@F@ CWEIGHT=@G@ OWEIGHT=@H@ ZERO=@I@ ONE=@J@ CONCAT=@K@"
sed '/^#/d' <<EOF | $VCSN -a"ab" -A"xy" -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" edit wd-ref.xml
# Exit.
10
EOF
diff $wd_full wd-ref.xml
sed '/^#/d' <<EOF | $VCSN -a"ab" -A"xy" edit wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" cat wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check predefined alphabets in help.
$VCSN --help | grep 'alphabet.*predefined'
while read a l; do
  $VCSN --help | grep "\`$a'.*\`$l' as empty word"
done <<EOF
letters 1
alpha   1
digits  e
EOF
