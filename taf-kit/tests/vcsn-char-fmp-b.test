#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-char-fmp-b

## ------------------------------------ ##
## Input/output work with transducers.  ##
## ------------------------------------ ##

$VCSN dot-dump $t1
$VCSN info $t1


## ------------------------------------- ##
## Tests and evaluation on transducers.  ##
## ------------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#  $VCSN are-isomorphic $t1 $t1
      $VCSN is-sub-normalized $t1
fail1 $VCSN is-empty $t1



## ------------------------------------ ##
## Generic algorithms for transducers.  ##
## ------------------------------------ ##


## Composition test on boolean transducers
  $VCSN compose $t1 $u1 > tmp1.xml
#FIXME: Disable xml diff
#  diff tmp1.xml $t1_compose_u1

  $VCSN u_compose $t1 $u1 > tmp2.xml

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
# fail1 $VCSN are-isomorphic tmp1.xml tmp2.xml

## Unambiguous composition test on boolean transducers
  $VCSN u_compose $t2 \
                     $u2 > tmp.xml

#FIXME: Disable xml diff
# diff tmp.xml $t2_ucompose_u2

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
## Inversion of t1
#  $VCSN invert $t1 \| are-isomorphic $inverted_t1 -

  input=`$VCSN eval $t1 abba`
  $VCSN domain $t1 | vcsn-char-b eval - abba
  $VCSN image $t1 | vcsn-char-b eval - $input

  $VCSN to-rw $t1

  $VCSN eval-aut $t1 $a1 | vcsn-char-b eval - yx



# money.xml is a vending machine that can accept three kinds of coins:
#   d - ten cents
#   v - twenty cents
#   c - fifty cents
# The machine should eat 50 cents and give change if too much has
# been given.

sed '/^#/d' <<EOF | $VCSN --alphabet1=dvc --alphabet2=dvc define-automaton money.xml
# Add states
1
# Add 7 states
7
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
5
# Add transition
3
# From, to, in, out
0
1
d
1
# Add transition
3
# From, to, in, out
1
2
d
1
# Add transition
3
# From, to, in, out
2
3
d
1
# Add transition
3
# From, to, in, out
3
4
d
1
# Add transition
3
# From, to, in, out
4
5
d
1
# Add transition
3
# From, to, in, out
0
2
v
1
# Add transition
3
# From, to, in, out
1
3
v
1
# Add transition
3
# From, to, in, out
2
4
v
1
# Add transition
3
# From, to, in, out
3
5
v
1
# Add transition
3
# From, to, in, out
4
5
v
d
# Add transition
3
# From, to, in, out
5
5
d
d
# Add transition
3
# From, to, in, out
5
5
v
v
# Add transition
3
# From, to, in, out
5
5
c
c
# Add transition
3
# From, to, in, out
0
5
c
1
# Add transition
3
# From, to, in, out
1
5
c
d
# Add transition
3
# From, to, in, out
2
5
c
v
# Add transition
3
# From, to, in, out
3
6
c
d
# Add transition
3
# From, to, in, out
4
6
c
v
# Add transition
3
# From, to, in, out
6
5
1
v
# Exit.
10
EOF

# Test a few coin sequences
for i in vddv:d c:1 vdd:0 vdv:1 dvc:dv vdc:dv vvcc:vvc; do
  in=${i%%:*}
  out=${i##*:}
  res=`$VCSN eval money.xml $in`
  res=`vcsn-char-b expand --alphabet=vdc $res`
  test "x$res" = x$out
done

# compute all the coin sequences that can return "c".
res=`$VCSN invert money.xml \| eval - c`
res=`vcsn-char-b expand --alphabet=vdc $res`
echo $res | tr + '\n' | sort >out
cat <<EOF | cmp - out
cc
dddddc
dddvc
ddvdc
dvddc
dvvc
vdddc
vdvc
vvdc
EOF
