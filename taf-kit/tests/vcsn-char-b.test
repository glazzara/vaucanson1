#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008, 2009 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

DIFF=${top_srcdir}/src/tests/common/xmldiff.sh
VCSN=vcsn-char-b

## -------------- ##
## Input/output.  ##
## -------------- ##

sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton all.xml
# Add states
1
# Add one state
1
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
0
# Add transition
3
# From and to
0
0
# Label
a+b
# Exit.
10
EOF

# Empty automaton (no states).
echo 10 | $VCSN --alphabet=ab edit-automaton empty.xml
# edit-automaton used to add a trailing newline at the end of the XML
# file; and identity would remove it.  Make sure the two outputs are
# now identical.
$VCSN identity empty.xml > empty2.xml
diff empty.xml empty2.xml

# Two states, no final states (empty language).
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton 2snf.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
# Add transition
3
# From, to, label
0
1
a
# Add transition
3
# From, to, label
1
0
b
# Exit.
10
EOF

# (ab)* using one transition
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton ab.xml
# Add states
1
# Add one state
1
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
0
# Add transition
3
# From, to, label
0
0
ab
# Exit.
10
EOF

# (ab)* using two transitions
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton ab2.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
0
# Add transition
3
# From, to, label
0
1
a
# Add transition
3
# From, to, label
1
0
b
# Exit.
10
EOF

# (0)-a->(1)-b->(2)
# (0)----ab---->(2)
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton nondet.xml
# Add states
1
# Add three states
3
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
2
# Add transition
3
# From, to, label
0
1
a
# Add transition
3
# From, to, label
1
2
b
# Add transition
3
# From, to, label
0
2
ab
# Exit.
10
EOF

# (0)-aa->(1)
# (0)-ab->(1)
# (0)-b-->(1)
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton comp.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
1
# Add transition
3
# From, to, label
0
1
aa
# Add transition
3
# From, to, label
0
1
ab
# Add transition
3
# From, to, label
0
1
b
# Exit.
10
EOF

# Complete, but non-deterministic automaton.
# (0)-a->(1)-a->(2)
# (0)<-b-(1)-b->(2)
# (0)-----a---->(2)
# (0)-----b---->(2)
# (0)<----a-----(2)
#        (1)<-b-(2)
sed '/^#/d' <<EOF | $VCSN --alphabet=ab edit-automaton cnd.xml
# Add states
1
# Add three states
3
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
2
# Add transition
3
# From, to, label
0
1
a
# Add transition
3
# From, to, label
1
2
a
# Add transition
3
# From, to, label
1
0
b
# Add transition
3
# From, to, label
1
2
b
# Add transition
3
# From, to, label
0
2
a
# Add transition
3
# From, to, label
0
2
b
# Add transition
3
# From, to, label
2
0
a
# Add transition
3
# From, to, label
2
1
b
# Exit.
10
EOF

AUTOMATA='all.xml empty.xml 2snf.xml ab.xml ab2.xml nondet.xml comp.xml cnd.xml'

# Cannot check display.

# Check that dot accepts the output.
for a in $AUTOMATA; do
  $VCSN identity $a -o DOT | dot
done

# Check that each builtin automaton can be read.
for a in $($VCSN list-automata | sed -n 's/^  * - \([-a-z0-9.]*\).*/\1/p')
do
  $VCSN info $a
done

for a in $AUTOMATA; do
  $VCSN identity $a >tmp.xml
#  $DIFF $a tmp.xml
done

## --------------------------------- ##
## Test and evaluation on automata.  ##
## --------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#
# are-isomorphic
#      $VCSN are-isomorphic a1.xml a1.xml
#fail1 $VCSN are-isomorphic a1.xml b1.xml

# eval
test "$($VCSN eval a1.xml 'a')" = 0
test "$($VCSN eval a1.xml 'ab')" = 1
test "$($VCSN eval a1.xml 'aaaabbb')" = 1

# is-ambiguous
      $VCSN is-ambiguous $ambiguous1
      $VCSN is-ambiguous $ambiguous2
fail1 $VCSN is-ambiguous $non_ambiguous1

# is-complete
fail1 $VCSN is-complete a1.xml
      $VCSN complete a1.xml \| is-complete -

# comp is not realtime so is-complete should complain
      $VCSN is-complete comp.xml 2>stderr && exit 1
      grep realtime stderr
fail1 $VCSN realtime comp.xml \| is-complete -
      $VCSN complete comp.xml 2>stderr  && exit 1
      grep realtime stderr
      $VCSN realtime comp.xml \| complete - \| is-complete -
      $VCSN is-complete cnd.xml

# is-deterministic
fail1 $VCSN is-deterministic a1.xml
      $VCSN determinize a1.xml \| is-deterministic -
fail1 $VCSN is-deterministic cnd.xml

# nondet is not realtime so is-determinisitic should complain
      $VCSN is-deterministic nondet.xml 2>stderr && exit 1
      grep realtime stderr
fail1 $VCSN realtime nondet.xml \| is-deterministic -
      $VCSN determinize nondet.xml \| is-deterministic -

# is-empty.
fail1 $VCSN is-empty a1.xml
      $VCSN is_empty empty.xml
fail1 $VCSN is_empty all.xml
fail1 $VCSN is-empty 2snf.xml

# has-succ-comp.
fail1 $VCSN has-succ-comp empty.xml
fail1 $VCSN has-succ-comp 2snf.xml
      $VCSN has-succ-comp all.xml

# is-normalized.
#fail1 $VCSN is-normalized a1.xml
#      $VCSN normalize a1.xml | $VCSN is-normalized -

# realtime and is-realtime

      $VCSN is-realtime a1.xml
fail1 $VCSN is-realtime ab.xml
      $VCSN realtime ab.xml \| is-realtime -

      $VCSN realtime $realtime_test \| is-realtime -

fail1 $VCSN is-realtime $initialword
      test "`$VCSN eval $initialword aba`" = 1
      test "`$VCSN eval $initialword ab`" = 0
      $VCSN realtime $initialword > initialreal.xml
      $VCSN is-realtime initialreal.xml
      test "`$VCSN eval initialreal.xml aba`" = 1
      test "`$VCSN eval initialreal.xml ab`" = 0

fail1 $VCSN is-realtime $finalword
      test "`$VCSN eval $finalword aba`" = 1
      test "`$VCSN eval $finalword ab`" = 0
      $VCSN realtime $finalword > finalreal.xml
      $VCSN is-realtime finalreal.xml
      test "`$VCSN eval finalreal.xml aba`" = 1
      test "`$VCSN eval finalreal.xml ab`" = 0

      $VCSN are-equivalent initialreal.xml finalreal.xml

fail1 test "`$VCSN is-realtime $initialseries`" = 1
      # $VCSN realtime $initialseries   is bogus currently.

# is-standard
fail1 $VCSN is-standard a1.xml
fail1 $VCSN is-standard $void_b_automaton
      $VCSN standardize a1.xml \| is-standard -
      $VCSN standard -a ab "1" \| standardize - \| is-standard -

## --------------------------------- ##
## Generic algorithms for automata.  ##
## --------------------------------- ##

$VCSN product a1.xml a1.xml \| identity -
$VCSN concatenate a1.xml a1.xml \| identity -

$VCSN quotient empty.xml \| is-empty -

fail1 $VCSN quotient 2snf.xml \| is-empty -
      $VCSN quotient 2snf.xml \| trim - \| is-empty -

fail1 $VCSN quotient all.xml \| is-empty -

      $VCSN are-equivalent ab.xml ab2.xml
fail1 $VCSN are-equivalent ab2.xml 2snf.xml


#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
# transpose
#  $VCSN transpose $b_to_transpose \| are-isomorphic $b_transposed -

## --------------------------------------- ##
## Boolean automaton specific algorithms.  ##
## --------------------------------------- ##

## --------------------------------------------- ##
## Conversion between automata and expressions.  ##
## --------------------------------------------- ##

all=$($VCSN aut-to-exp all.xml)
test $all = '(a+b)*'
$VCSN --alphabet=ab exp-to-aut "$all" >aut2.xml

# standard
$VCSN -a a standard 0 \| is-standard -
$VCSN -a a standard a \| is-standard -
$VCSN -a ab standard 'a+b' \| is-standard -
$VCSN -a ab standard '(a+b)*' \| is-standard -
$VCSN -a ab standard 'a.b' \| is-standard -
$VCSN -a ab standard '(a.b)*' \| is-standard -
$VCSN -a ab standard '(a*.b*)*' \| is-standard -

$VCSN -a ab standard 'a+b' > aut3.xml
$VCSN -a ab thompson 'a+b' \| realtime - > aut4.xml

# check that the krat_exp_parser fail on some tests
fail255 $VCSN -a"abc" thompson 'a+ bd'
fail255 $VCSN -a"abc" thompson 'a+ bdc'

#FIXME: as soon as an xmldiff tools exists. Use it here.
$VCSN info aut3.xml > aut3.info
$VCSN info aut4.xml > aut4.info
diff aut3.info aut4.info

# Test some function of the parser

: >stderr.ref
$VCSN -a01 thompson "1 + 0" 2>stderr
diff stderr stderr.ref
$VCSN --parser="PLUS=toto" -aab thompson "a toto b" 2>stderr
diff stderr stderr.ref

# Test for Alphabets

# ascii
# FIXME:  still have a problem with the ' ' (space) character.
(
parser="OPAR=op CPAR=cp PLUS=++ TIMES=.. STAR=** OWEIGHT=ow CWEIGHT=cw ZERO=00 ONE=11"
end=126 # '~'
i=33 # '!'
while [ $i -le $end ];
do
  val=`printf "%2x" $i`
  hex=`printf "\x$val"`
  exp="a ++ $hex"
  out=`$VCSN --alphabet=ascii --parser="$parser" thompson "$exp" \| aut-to-exp -`
  test $out = "a+$hex"
  i=`expr $i + 1`
done
)

# Check behavior when given more than one space.
: >stderr.ref
$VCSN -aab --parser="SPACE=toto SPACE=tata" thompson 'atoto+tatab' >1.xml 2>stderr
diff stderr stderr.ref
$VCSN -aab --parser="SPACE=toto SPACE=tata" thompson 'a+b' >2.xml 2>stderr
diff stderr stderr.ref
$VCSN -v are-equivalent 1.xml 2.xml

# Check predefined alphabets in help.
$VCSN --help | grep predefined
while read a l; do
  $VCSN --help | grep "\`$a'.*\`$l' as empty word"
done <<EOF
letters 1
alpha   1
digits  e
ascii   _e
EOF

## ------------------- ##
## Test div3base2.xml. ##
## ------------------- ##

i=0
for val in 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 1111 10000;
do
  out=`$VCSN eval div3base2.xml "$val"`
  if [ `expr $i % 3` = 0 ];
  then
    test $out = 1
  else
    test $out = 0
  fi
  i=`expr $i + 1`
done

## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
sed '/^#/d' <<EOF | $VCSN -a"xy" -p"$writing_data" edit-automaton wd-ref.xml
# Exit.
10
EOF
sed '/^#/d' <<EOF | $VCSN -a"xy" edit-automaton wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" identity wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check that ratexp commands correctly handle the representations.
# (with the previous test, it is sufficient to only check for
# one (MonoidRep) and zero (SeriesRep))
ret=`$VCSN -a"ab" -p"ONE=x" standard x \| aut-to-exp -`
test x"$ret" = x"x"
ret=`$VCSN -a"ab" -p"ONE=x" thompson x \| aut-to-exp -`
test x"$ret" = x"x"
ret=`$VCSN -a"ab" -p"ZERO=x" standard x \| aut-to-exp -`
test x"$ret" = x"x"
ret=`$VCSN -a"ab" -p"ZERO=x" thompson x \| aut-to-exp -`
test x"$ret" = x"x"


# Test writing data in RegExp when output as XML.
$VCSN -a 01+ --parser=PLUS=p exp-to-aut 1p0+0 \| aut-to-exp -o xml - > regex.xml
# Make sure we do not need to specify the alphabet or the writing data
$VCSN exp-to-aut -i xml regex.xml
ret=`$VCSN expand -i xml regex.xml`
test x"$ret" = x"1p0+0" || test x"$ret" = x"0+0p1"

exit 0
