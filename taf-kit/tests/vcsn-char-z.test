#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-char-z

## --------------------------------- ##
## Input/output work with automata.  ##
## --------------------------------- ##

$VCSN dot-dump $c1
$VCSN info $c1

## ---------------------------------- ##
## Tests and evaluation on automata.  ##
## ---------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#  $VCSN are-isomorphic $c1 $c1
#
test $($VCSN eval $c1 bababa) -eq 42
      $VCSN is-ambiguous $c1
fail1 $VCSN is-empty $c1
      $VCSN is-realtime $c1
fail1 $VCSN is-standard $c1
fail1 $VCSN is-standard $void_z_automaton
      $VCSN is-standard $standard_c1
      $VCSN -a ab standard '({2} a).({4} 1)' > 2a_41.xml
      $VCSN is-standard 2a_41.xml

      $VCSN is-complete $c1
fail1 $VCSN is-complete $void_z_automaton
      $VCSN complete $void_z_automaton \| is-complete -

## --------------------------------- ##
## Generic algorithms for automata.  ##
## --------------------------------- ##

# star-of-standard
$VCSN star-of-standard $standard_c1 \| is-standard -

# construct ((2 a).(4 1))*
$VCSN star-of-standard 2a_41.xml > star_2a_41.xml

$VCSN is-standard star_2a_41.xml
test $($VCSN eval star_2a_41.xml a) -eq 8
test $($VCSN eval star_2a_41.xml aa) -eq 64
test $($VCSN eval star_2a_41.xml aaa) -eq 512

# union-of-standard
$VCSN union-of-standard $standard_c1 $standard_c1 \| is-standard -

# concat-of-standard
$VCSN concat-of-standard $standard_c1 $standard_c1 \| is-standard -


# BEWARE: we are mixing the letters O/I with the digits 0/1 below.
sed '/^#/d' <<EOF | $VCSN --parser='ONE=I ZERO=O ALPHABET=01' define-automaton oi.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
1
# Set a state to be final.
7
# Which state
1
1
# Add transition
3
# From and to
0
0
# Label
{2} 0
# Add transition
3
# From and to
1
1
# Label
{3} 1
# Add transition
3
# From and to
0
1
# Label
I
# Exit.
10
EOF

$VCSN --parser='ONE=I ZERO=O ALPHABET=01' eval oi.xml '00011' > out
test `cat out` = 72

$VCSN --parser='ONE=I ZERO=O ALPHABET=01' standard '(I+O).1.(I+0)+O'

echo 10 | $VCSN --alphabet=ab define-automaton empty.xml
$VCSN eval empty.xml "ab" > out
test `cat out` = 0


# ------------------ #
# Trivial rewritings #
# ------------------ #

while read before after; do
  test "x`$VCSN -aab identity-exp $before`" = "x$after"
done <<EOF
{0}a 0
a{0} 0
{1}a a
a{1} a
a{2} {2} a
{2}({3}a) {6} a
(a{4}){5} {20} a
{3}0 0
0{3} 0
({4}a){5} {20} a
({4}ab){5} {4} (ab {5})
({4}(a+b)){5} {4} ((a+b) {5})
({4}a+b){5} ({4} a+b) {5}
EOF
exit 0
