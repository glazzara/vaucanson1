#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008, 2009 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-char-z

## --------------------------------- ##
## Input/output work with automata.  ##
## --------------------------------- ##

$VCSN identity -o DOT c1.xml | dot
$VCSN info c1.xml

## ---------------------------------- ##
## Tests and evaluation on automata.  ##
## ---------------------------------- ##

#FIXME: Disable are-isomorphic test
# as long as this algorithm is not correctly
# defined.
#  $VCSN are-isomorphic c1.xml c1.xml
#
test $($VCSN eval c1.xml bababa) -eq 42
      $VCSN is-ambiguous c1.xml
fail1 $VCSN is-empty c1.xml
      $VCSN is-realtime c1.xml
fail1 $VCSN is-standard c1.xml
fail1 $VCSN is-standard $void_z_automaton
      $VCSN is-standard $standard_c1
      $VCSN -a ab standard '({2} a).({4} 1)' > 2a_41.xml
      $VCSN is-standard 2a_41.xml

      $VCSN is-complete c1.xml
fail1 $VCSN is-complete $void_z_automaton
      $VCSN complete $void_z_automaton \| is-complete -

## --------------------------------- ##
## Generic algorithms for automata.  ##
## --------------------------------- ##

# star-of-standard
$VCSN star-of-standard $standard_c1 \| is-standard -

# construct ((2 a).(4 1))*
$VCSN star-of-standard 2a_41.xml > star_2a_41.xml

$VCSN is-standard star_2a_41.xml
test $($VCSN eval star_2a_41.xml a) -eq 8
test $($VCSN eval star_2a_41.xml aa) -eq 64
test $($VCSN eval star_2a_41.xml aaa) -eq 512

# union-of-standard
$VCSN union-of-standard $standard_c1 $standard_c1 \| is-standard -

# concat-of-standard
$VCSN concat-of-standard $standard_c1 $standard_c1 \| is-standard -


# BEWARE: we are mixing the letters O/I with the digits 0/1 below.
sed '/^#/d' <<EOF | $VCSN --parser='ONE=I ZERO=O ALPHABET=01' edit-automaton oi.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
1
# Set a state to be final.
7
# Which state
1
1
# Add transition
3
# From and to
0
0
# Label
{2} 0
# Add transition
3
# From and to
1
1
# Label
{3} 1
# Add transition
3
# From and to
0
1
# Label
I
# Exit.
10
EOF

$VCSN --parser='ONE=I ZERO=O ALPHABET=01' eval oi.xml '00011' > out
test `cat out` = 72

$VCSN --parser='ONE=I ZERO=O ALPHABET=01' standard '(I+O).1.(I+0)+O'

echo 10 | $VCSN --alphabet=ab edit-automaton empty.xml
$VCSN eval empty.xml "ab" > out
test `cat out` = 0


# ------------------ #
# Trivial rewritings #
# ------------------ #

#  Here are the trivial identities we should use to rewrite the
#  formula as soon as it is read.
#
# [0.1]  E+0 = 0+E  ==>  E
# [0.2]  E.0 = 0.E  ==>  0
# [0.3]  (0)*  ==>  1
# [0.4]  k:.0 = 0.:k  ==>  0
# [0.5]  0_K:.E = E.:0_K  ==>  0
#
# [1.1]  E.1 = 1.E  ==>  E
# [1.2]  1_K:.E = E.:1_K  ==>  E
# [1.3]  1.:k   ==>  k:.1
# [1.4]  (k:.1).E  ==>  k:.E
# [1.5]  E.(k:.1)  ==>  E.:k
#
# [2.1]  k:.(h:.E)  ==>  (kh):.E
# [2.2]  (E.:k).:h  ==>  E.:(kh)
# [2.3]  (k:.E).:h   ==>  k:.(E.:h)
# [2.4]  m.:k  ==>  k:.m, for all m in the monoid M

while read rule before after; do
  test "x`$VCSN -aab identity-exp $before`" = "x$after"
done <<EOF
[0.1]          a+b+0             a+b
[0.1]          a+0+b             a+b
[0.1]          0+a+b             a+b
[0.2]          {0}a              0
[0.2]          a{0}              0
[0.2]          (a+b){0}          0
[0.3]          0*                1
[0.3+0.2]      0*{0}             0
[0.4]          {3}0              0
[0.4]          0{3}              0
[0.5]          (a+b)0            0
[0.5]          ab0               0
[0.5]          (a+b).0           0
[0.5]          0(ab)             0
[0.5+0.3]      (0(ab))*          1
[0.5+0.3]      (0(ab{3}))*{4}    {4} 1
[0.5+0.4+0.3]  ({3}(0(ab)))*{4}  {4} 1
[1.1]          1a                a
[1.1]          a1                a
[1.1]          1.1.a.1           a
[1.1]          {3}(1.a)          {3} a
[1.2]          {1}a              a
[1.2]          a{1}              a
[1.3]          1{3}              {3} 1
[1.4]          {3}1.a            {3} a
[1.4]          ({3}1).a          {3} a
[1.3+1.4]      1{3}.a            {3} a
[1.5]          (a+b).{3}1        (a+b) {3}
[1.5+2.4]      a.({3}1)          {3} a
[1.3+1.5]      ab.1{3}           ab {3}
[1.3+1.5+2.4]  a.1{3}            {3} a
[2.1]          {2}({3}a)         {6} a
[2.2]          (ab{2}){3}        ab {6}
[2.3]          ({4}ab){5}        {4} (ab {5})
[2.3]          ({4}(a+b)){5}     {4} ((a+b) {5})
[2.4]          a{2}              {2} a
[2.2+2.4]      (a{4}){5}         {20} a
[2.3+2.4+2.1]  ({4}a){5}         {20} a
[Nothing]      ({4}a+b){5}       ({4} a+b) {5}
[Nothing]      ({4}a.b){5}       ({4} a.b) {5}
EOF

while read before after; do
  test "x`$VCSN -aabc realtime-exp $before`" = "x$after"
done <<EOF
1                1
abc              a.b.c
abc{2}           (a.b.c) {2}
ab{2}ca          a.b.{2} (c.a)
ab{2}*ca         ((a.b) {2})*.c.a
(ab{2})c         (a.b) {2}.c
(1+ab)*          (1+a.b)*
EOF

## -------------------- ##
## Test div3base10.xml. ##
## -------------------- ##

i=0
end=100
while [ $i -le $end ];
do
  out=`$VCSN eval div3base10.xml "$i"`
  test $out = `expr $i % 3`
  i=`expr $i + 1`
done

## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
sed '/^#/d' <<EOF | $VCSN -a"xy" -p"$writing_data" edit-automaton wd-ref.xml
# Exit.
10
EOF
sed '/^#/d' <<EOF | $VCSN -a"xy" edit-automaton wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" identity wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check predefined alphabets in help.
$VCSN --help |grep predefined

exit 0
