#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2008, 2009, 2010, 2011 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-int-fmp-z

sed '/^#/d' <<EOF | $VCSN --alphabet1=10,11,12 --alphabet2=20,21,22 edit x.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
# Weight?
2
# Set a state to be final.
7
# Which state
1
# Weight
3
# Add transition
3
# From and to
0
1
# Label (word,word,weight)
10#11
22
5
# Add transition
3
# From and to
1
0
# Label
11
22#20
1
# Exit.
10
EOF

# The evaluation of a word on FMP transducers internally uses
# aut-to-exp which may produce different results depending on the
# order used to remove the states of the automaton.  The following
# test are simple enough so that the resulting ratexps should only
# differ by their parentheses.  We use "expand" to hide these
# discrepancies.

$VCSN subnormalize x.xml > xs.xml
res=`$VCSN eval xs.xml 10.11.11`
test "x$res" = xz

res=`$VCSN eval xs.xml 10#11`
res=`vcsn-int-z expand --alphabet=22 "$res"`
test "x$res" = "x{30} 22"

res=`$VCSN eval xs.xml 10#11.11#10.11`
res=`vcsn-int-z expand --alphabet=20,22 "$res"`
test "x$res" = "x{150} 22#22#20#22"

res=`$VCSN image x.xml | vcsn-int-z aut-to-exp-DM -`
res=`vcsn-int-z expand --alphabet=22,20 "$res"`
test "x$res" = "x{30} (({5} 22#22#20)*.22)"

res=`$VCSN aut-to-exp-DM x.xml`
test "x$res" = "x{2} ({5} (10#11,22).(11,22#20))*.{5} ((10#11,22) {3})"

fail1 $VCSN is-ltl x.xml
fail1 $VCSN is-ltl xs.xml

sed '/^#/d' <<EOF | $VCSN --alphabet1=10,11,12 --alphabet2=20,21,22 edit y.xml
# Add states
1
# Add two states
3
# Set a state to be initial.
5
# Which state
0
# Weight?
2
# Set a state to be final.
7
# Which state
2
# Weight
3
# Add transition
3
# From and to
0
1
# Label (word,word,weight)
10#11
22#20
5
# Add transition
3
# From and to
1
2
# Label
11#12
22#20
1
# Add transition
3
# From and to
2
1
# Label
e
e
1
# Exit.
10
EOF

fail1 $VCSN is-ltl y.xml
fail1 $VCSN subnormalize y.xml \| is-ltl -
fail1 $VCSN proper y.xml \| is-ltl -
      $VCSN subnormalize y.xml \| proper - \| is-ltl -

$VCSN proper y.xml \| subnormalize - > yl.xml
$VCSN is-ltl yl.xml
$VCSN ltl-to-pair yl.xml > yp.xml
vcsn-int-int-z pair-to-fmp yp.xml > yl2.xml
$VCSN data yl.xml > yl.info
$VCSN data yl2.xml > yl2.info
diff yl.info yl2.info



## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
writing_data1="CPAR=#A# OPAR=#B# PLUS=#C# SPACE=#D# STAR=#E# TIMES=#F# CWEIGHT=#G# OWEIGHT=#H# ZERO=#I# ONE=#J# CONCAT=#K#"
writing_data2="CPAR=@A@ OPAR=@B@ PLUS=@C@ SPACE=@D@ STAR=@E@ TIMES=@F@ CWEIGHT=@G@ OWEIGHT=@H@ ZERO=@I@ ONE=@J@ CONCAT=@K@"
sed '/^#/d' <<EOF | $VCSN -a"10,11" -A"12,13" -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" edit wd-ref.xml
# Exit.
10
EOF
sed '/^#/d' <<EOF | $VCSN -a"10,11" -A"12,13" edit wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" -P"$writing_data1" -Q"$writing_data2" cat wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check predefined alphabets in help.
$VCSN --help | fail1 grep 'alphabet.*predefined'
