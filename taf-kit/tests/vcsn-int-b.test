#! /bin/sh

# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2006, 2007, 2008, 2009, 2010 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.

. ./defs || exit 1

set -e

VCSN=vcsn-int-b

$VCSN cat $int_b

# Make sure dot understands the output.
# Also make sure the case is ignored in the argument of -o.
$VCSN cat -o dOt $int_b | dot

test `$VCSN eval $int_b "10#11"` = 1

fail1 $VCSN eval $int_b "10#12"

test `$VCSN eval $int_b "11"` = 1

$VCSN eval $int_b "1" 2> stderr && exit 1
grep 'Cannot parse' stderr

sed '/^#/d' <<EOF | $VCSN --alphabet 32,33,34 edit 33.xml
# Add states
1
# Add two states
2
# Set a state to be initial.
5
# Which state
0
# Set a state to be final.
7
# Which state
1
# Add transition
3
# From and to
0
1
# Label
32
# Add transition
3
# From and to
1
0
# Label
33
# Exit.
10
EOF

$VCSN is-deterministic 33.xml
fail1 $VCSN is-complete 33.xml
$VCSN is-deterministic 33.xml
$VCSN complete 33.xml \| is-complete -
$VCSN determinize 33.xml \| is-deterministic -

# Test empty word
$VCSN --alphabet=12,11 standard '(11 + e).12' > e.xml
test 1 = `$VCSN eval e.xml '12'`
test 0 = `$VCSN eval e.xml '11'`
test 1 = `$VCSN eval e.xml '11#12'`

$VCSN --alphabet=33,34,35 thompson '(33* + 35).34' \| quotient -
$VCSN --alphabet=33,34,35 standard '(33* + 35).34' > m.xml

$VCSN transpose m.xml > mt.xml
$VCSN is-deterministic mt.xml && exit 0
$VCSN determinize mt.xml > mtd.xml
$VCSN is-deterministic mtd.xml
$VCSN are-equivalent mt.xml mtd.xml
$VCSN are-equivalent m.xml mtd.xml && exit 0
$VCSN trim mtd.xml > mtdt.xml
$VCSN are-equivalent mt.xml mtdt.xml

mtdt=`$VCSN aut-to-exp mtdt.xml`
mt=`$VCSN aut-to-exp mt.xml`
$VCSN --alphabet=33,34,35 standard "$mt" > mte.xml
$VCSN --alphabet=33,34,35 standard "$mtdt" > mtdte.xml
$VCSN are-equivalent mt.xml mte.xml
$VCSN are-equivalent mtdt.xml mtdte.xml
$VCSN are-equivalent mte.xml mtdte.xml

$VCSN --alphabet=33,34,35 standard '(33* + 35).34+(33*+35)' > p.xml
$VCSN determinize p.xml \| minimize - > pdm.xml
$VCSN quotient p.xml > pq.xml
$VCSN are-equivalent p.xml pdm.xml
$VCSN are-equivalent p.xml pq.xml
$VCSN are-equivalent pdm.xml pq.xml

# These weird tests show some features of the parser.
# (1) Integers may have leading zeros (010 is the same as 10)
#     but not trailing zeros (100 is tokenized as 10.0=0 if there is only
#     10 in the alphabet)
# (2) Integers may be negatives.
# (3) Words are preferred over other tokens.
#     For instance 010010 would be tokenized as 10#10 or 100#10, but not
#     10.0.10 even though 0 is a valid token.
# (4) The parser for words is greedy, and the # operator can be used
#     to disambiguate.
r=`$VCSN --alphabet=10,-5 --parser=ZERO=0 cat-E '10e010010#010+100-5'`
test "$r" = '10#10#10#10'
r=`$VCSN --alphabet=10,100,-5 --parser=ZERO=0 cat-E '10e010010#010+100-5'`
test "$r" = '10#100#10#10+100#-5'

# --alphabet is required for defined-automaton; make sure
# the error message points the user to that option.
$VCSN edit x.xml 2>stderr && exit 1
fgrep ' --alphabet' stderr

## --------------------------- ##
## Test writing data handling. ##
## --------------------------- ##

writing_data="CPAR=_A_ OPAR=_B_ PLUS=_C_ SPACE=_D_ STAR=_E_ TIMES=_F_ CWEIGHT=_G_ OWEIGHT=_H_ ZERO=_I_ ONE=_J_ CONCAT=_K_"
sed '/^#/d' <<EOF | $VCSN -a"10,11" -p"$writing_data" edit wd-ref.xml
# Exit.
10
EOF
sed '/^#/d' <<EOF | $VCSN -a"10,11" edit wd-empty.xml
# Exit.
10
EOF
$VCSN -p"$writing_data" cat wd-empty.xml > wd-new.xml
diff wd-new.xml wd-ref.xml

# Check predefined alphabets in help.
$VCSN --help | fail1 grep 'alphabet.*predefined'

# Taf-kit should choke on the ";" but should not complain about
# some ' ' character.
$VCSN -a-1,0,1 expand '1;1' 2>stderr && exit 1
grep "' '" stderr && exit 1
grep "Lexer error" stderr



exit 0
