#!/bin/sh
# gen_parser.sh: parser generator for libcppshls
# Written by Raphaël Poss <raph@lrde.epita.fr>
# Copyright (c) 2002 LRDE.

FILTERNAME=in2grammar.sh
PARSERBASE=parser_header

if [ $# -lt 4 ]; then
   echo "usage: $0 <outfile> <p. name> <srcdir> <prioset> <input files ...>" >&2
   echo "\t<outfile> the output grammar file" >&2
   echo "\t<p. name> the parser name prefix" >&2
   echo "\t<srcdir>  the source directory for priosets and rulesets" >&2
   echo "\t<prioset> the prioset name for the grammar" >&2
   echo "\t<input files> the different rulesets to use" >&2
   exit 1
fi

SCRIPTNAME="$0"
RUN_DIR=`echo "$SCRIPTNAME"|sed -e 's,^\(.*\)/[^/]*$,\1,g'`
if test x"$RUN_DIR" = x; then
   RUN_DIR=.
fi
OUTFILE="$1"
MODE=`echo "$OUTFILE"|sed -e 's,^.*\.\([^.]*\)$,\1,g'`
OUTBASENAME=`echo "$OUTFILE"|sed -e 's,^\(.*\)\.[^.]*$,\1,g'`
PNAME="$2"
SRCDIR="$3"
PRIOSET="$4"
shift
shift
shift
shift

if [ -f "$FILTERNAME" ]; then
   FILTERBASE="$FILTERNAME"
elif [ -f "$RUN_DIR/$FILTERNAME" ]; then
   FILTERBASE="$RUN_DIR/$FILTERNAME"
else
   echo "$FILTERNAME not found either in current directory nor $RUN_DIR" >&2
   exit 1
fi

HEADER="$SRCDIR/$PARSERBASE.$MODE"

echo "Collecting files..."
( \
 echo "////// $OUTBASENAME.$MODE //////"; \
 echo "// This is a grammar file for cppsh."; \
 echo; \
 echo "// It has been generated by $0 from the following files:"; \
 if [ -f "$HEADER" ]; then \
 echo "//   $HEADER"; \
 fi; \
 echo "//   $SRCDIR/$PRIOSET.prio"; \
 for i in "$@"; do \
 echo "//   $SRCDIR/$i.ruleset"; \
 done; \
 echo; \
 if [ -f "$HEADER" ]; then \
   cat "$HEADER"; \
 fi; \
 cat "$SRCDIR/$PRIOSET.prio" | "$SHELL" "$FILTERBASE" "$MODE" \
   || exit 1 ; \
 for i in "$@"; do \
 cat "$SRCDIR/$i.ruleset" | "$SHELL" "$FILTERBASE" "$MODE" \
   || exit 1 ; \
 done \
) | sed -e \
"s,@BASENAME@,$OUTBASENAME,g;
 s,@NAME@,$PNAME,g" > "$OUTFILE"

if [ "x$MODE" = xlemon ]; then

echo "Collecting non-terminals..."
non_terminals=`cat "$OUTFILE" \
  | sed -n -e '/^[a-z_]*[^:]*::=.*/p' \
  | sed -e 's,^\([a-z_]*\).*$,\1,g' \
  | sort \
  | uniq
`

echo "Appending garbage collection rules..."
( \
echo "//// Garbage collection rules for the lemon parser" ; \
echo "//// (automatically generated by $0)" ; \
echo ; \
for i in $non_terminals; do
  echo "%type $i { Cell* }"; \
  echo "%destructor $i { delete \$\$; }"; \
done ) >> "$OUTFILE"

fi
