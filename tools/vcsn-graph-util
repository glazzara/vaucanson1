#!/bin/sh
# vcsn_add_impl.sh: this file is part of the Vaucanson project.
#
# Vaucanson, a generic library for finite state machines.
# Copyright (C) 2007 The Vaucanson Group.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
# The Vaucanson Group consists of people listed in the `AUTHORS' file.
#

OUTPUT_DIR="."
INCLUDE_PATH="$VCSN_INCLUDE_PATH"
if [ -z "$INCLUDE_PATH" ]; then
    INCLUDE_PATH="/usr/local/include"
fi

DATA_PATH="$VCSN_DATA_PATH"
if [ -z "$DATA_PATH" ]; then
    DATA_PATH="/usr/local/vaucanson/data"
fi

IMPL_NAME=""

usage()
{
  cat << EOF
Usage: vcsn_add_impl.sh [[--data-path=<path>] --new-impl=<name>]
			[[--include-path=<path>] <path/*_graph_impl.hh>]
			[--output-dir=<path>]
			[--howto]

    Options:

    --new-impl=<name>		Create a new graph implementation template
				with name 'name'.
				
    --data-path=<path>		Path to the Vaucanson data directory.
				(default = VCSN_DATA_PATH
				  or /usr/local/vaucanson/data)
    
    --include-dir=<path>	Path to the Vaucanson include directory.
				(default = VCSN_INCLUDE_PATH
				  or /usr/local/vaucanson/include)
    
    --output-dir=<path>		Path where the files are generated.

EOF
}

howto()
{
  cat << EOF
    How to:
    
    I) Create a new graph structure:

      Just type the following command with the proper parameters:
	./vcsn-graph-util --data-path=/vcsn/data/path --new-impl=mine

      In your directory you have now two files:
	* mine_graph_impl.hh
	* mine_graph_impl.hxx
      
      Edit them and fill the function prototypes.
      If you want to use your structure, you will need to generate the context
      headers. See step II in this how to.


    II) Generate context headers:

      1) In your project directory you may have the following hierarchy:
      
	* include/
	  * mine_graph_impl.hh
	  * mine_graph_impl.hxx
  
	
      2) in the include directory, run:

	vcsn-graph-util mine_graph_impl.hh --vcsn-include-path=path/to/vcsn/include
  	
	
      3) Then in your project directory you have now:
    
	* include/
	  * mine
	    * boolean_automaton.hh
	    * boolean_transducer.hh
	    * fmp_transducer.hh
	    * ...
	  * mine_graph_impl.hh
	  * mine_graph_impl.hxx
					
								      
      4) You just need to include the proper header to use your graph structure
	 with Vaucanson.

EOF
}

write_context()
{
  UpperName=`echo "$1/$2/$3" | sed -e 's/[\.\/]/\_/g' | tr "[:lower:]" "[:upper:]"`
  context=`echo $3 | cut -d '.' -f 1 | sed -e 's/_structures//g'`
  cat > "$1/$2/$3" <<-EOF 
#ifndef $UpperName
# define $UpperName
# ifndef VCSN_GRAPH_IMPL
#  define VCSN_GRAPH_IMPL $2
#  define VCSN_GRAPH_IMPL_INCLUDE_PATH $4
#  define VCSN_CONTEXT_INCLUDE_PATH $1
# else
#  define DONT_UNDEF
# endif

# include <vaucanson/misc/usual_macros.hh>
# include <vaucanson/automata/generic_contexts/$3>

# ifndef DONT_UNDEF
#  undef VCSN_GRAPH_IMPL
#  undef VCSN_GRAPH_IMPL_INCLUDE_PATH
#  undef VCSN_CONTEXT_INCLUDE_PATH
# else
#  undef DONT_UNDEF
# endif

# ifndef ALIAS_$context && ifdef VCSN_DEFAULT_GRAPH_IMPL
#  define ALIAS_$context
namespace vcsn
{
  namespace $context = vcsn::VCSN_DEFAULT_GRAPH_IMPL::$context;
}
# endif

#endif // !$UpperName
EOF
}

parse_option()
{
  if ! [ -z "`echo $1 | sed -ne '/--include-path='/p`" ]; then
    INCLUDE_PATH="`echo $1 | sed -ne s/--include-path=//p`"
  elif ! [ -z "`echo $1 | sed -ne '/--output-dir='/p`" ]; then
    OUTPUT_DIR="`echo $1 | sed -ne s/--output-dir=//p`"
  elif ! [ -z "`echo $1 | sed -ne '/--new-impl='/p`" ]; then
    IMPL_NAME="`echo $1 | sed -ne s/--new-impl=//p`"
  elif ! [ -z "`echo $1 | sed -ne '/--data-path='/p`" ]; then
    DATA_PATH="`echo $1 | sed -ne s/--data-path=//p`"
  elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    usage
  elif [ "$1" == "--howto" ]; then
    howto
  elif ! [ -z "`echo $1 | sed -ne s/--//p`" ]; then
    echo "Bad option: $1"
    usage
    exit 1
  else
    return 1
  fi
  return 0
}

files=()

write_headers()
{
  for file in ${files[@]}; do
    impl=`basename $file`
    impl=`echo "$impl" | sed -ne "/.*_graph_impl\.hh/p" | cut -d '_' -f 1`
    mkdir -p "$OUTPUT_DIR/$impl"
    for header in `find $INCLUDE_PATH/vaucanson/automata/generic_contexts/ -name '*.hh'`; do
      write_context "$OUTPUT_DIR" $impl `basename $header` `dirname $file` 
    done
  done
}
 
write_impl_template()
{
  if ! [ -f $DATA_PATH/template_graph_impl.hh ]; then
    echo "VCSN_DATA_PATH variable is not set properly or you forgot the --data-path=<path> option"
    exit 1
  fi
  echo -n "Copying template files from $DATA_PATH to $OUTPUT_DIR..."
  IMPL_NAME_=`echo "$IMPL_NAME" | sed -e 's/[\.\/]/\_/g' | tr "[:lower:]" "[:upper:]"`
 
  cat "$DATA_PATH/template_graph_impl.hh" | sed -e "s/#IMPL_NAME#/$IMPL_NAME/g" \
	| sed -e "s/#IMPL_NAME_#/${IMPL_NAME_}/g" > "$OUTPUT_DIR/${IMPL_NAME}_graph_impl.hh"

  cat "$DATA_PATH/template_graph_impl.hxx" | sed -e "s/#IMPL_NAME#/$IMPL_NAME/g" \
	| sed -e "s/#IMPL_NAME_#/${IMPL_NAME_}/g" > "$OUTPUT_DIR/${IMPL_NAME}_graph_impl.hxx"

  echo " done."
}

main()
{
  if [ $# -eq 0 ]; then
    usage
  fi
  
  for arg in $@; do
    if ! parse_option $arg; then
      impl=`echo "$arg" | sed -ne "/.*_graph_impl\.hh/p" | cut -d '_' -f 1`
      if [ -z "$impl" ]; then
	echo "Error : invalid header name (a *_graph_impl.hh form is expected) or invalid option:"
	echo "$arg"
	echo "Use the --help option to get more information."
	exit 1
      fi
      files=( "${files[@]}" "$arg" )
    fi
  done
  
  if [ -z "$INCLUDE_PATH" ]; then
    INCLUDE_PATH="/usr/local/include"
  fi
  
  if [ -z "$IMPL_NAME" ]; then
    write_headers
  else
    write_impl_template
  fi

}

main $@

