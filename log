Index: 0.151/ChangeLog
0a1,6
> 2003-02-13  Maxime Rey  <max@lrde.epita.fr>
> 
> 	* /include/vaucanson/algebra/concrete/letter/range.hxx :
> 	static_ranged work now
> 	* doc/tutorial/tutorial.tex: upgrade
> 
Index: 0.151/include/vaucanson/algebra/concrete/letter/range.hxx
35,36c35,38
<       Interval::check(v);
<       value_ = v;
---
>       if (Interval::check(v))
> 	value_ = v;
>       else
> 	value_ = Interval::from();
Index: 0.151/doc/tutorial/tutorial.tex
213c213
< An element of the alphabet set can be implemented in a lot of
---
> An element of the alphabet set (so an alphabet) can be implemented in a lot of
217c217,329
< % FIXME: example.
---
> \paragraph{Example 1 (dynamical alphabet)}
> 
> \paragraph{Type Creation} 
> First we have to precise wich kind of letter we wish manipulate inside our 
> futur alphabet. You can use the builtins types of C/C++ (like char, int, ...)
> or use more specific types proposed in Vaucanson. To do that, one trivial
> typedef be enough :
> 
> \begin{verbatim}
> typedef char Letter;
> \end{verbatim}
> 
> in order to have an alphabet of char, or we can type : 
> 
> \begin{verbatim}
> typedef static_ranged<char, static_char_interval<'a','z'> >  Letter;
> \end{verbatim}
> 
> in order to have a more specific kind of symbols inside your alphabet. 
> If you choose this last option, symbols can only be letters between 'a'
> and 'z', nothing more.
> 
> Then we have to create the type of set of alphabets inside which we will 
> manipulate one of them. We can do this very naturally :
> 
> \begin{verbatim}
> typedef SetAlphabets<Letter>  Alphabets;
> \end{verbatim}
> 
> Lastly, we can create the type of the alphabet we will effectively use,
> with the Element pattern :
> 
> \begin{verbatim}
> typedef Element<Alphabets, std::set<Letter> >  Alphabet;
> \end{verbatim}
> 
> This previous should be understand like : ``an element of the set of all
> alphabets, implemented by a set of Letter''.
> In fact this code is already present inside Vaucanson, more exactly inside
> a file named ``predefs.hh'' :
> 
> \begin{verbatim}
> ==============================================================================
> 
>  namespace small_alpha_letter {
>       
>       typedef static_ranged<char, static_char_interval<'a','z'> >  Letter;
>       typedef SetAlphabets<Letter>				   Alphabets;
>       typedef Element<Alphabets, std::set<Letter> >		   Alphabet;
> 
>     } // small_alpha_letter
> 
>     namespace char_letter {
> 
>       typedef SetAlphabets<char>				   Alphabets;
>       typedef Element<Alphabets, std::set<char> >		   Alphabet;
> 
>     } // char_letter
> 
>     namespace int_letter {
> 
>       typedef SetAlphabets<int>					   Alphabets;
>       typedef Element<Alphabets, std::set<int> >		   Alphabet;
> 
>     } // int_letter
> 
> ==============================================================================
> \end{verbatim}
> 
> You have only to choose the right namespace for your work, or create a new.
> Next a short example of alphabet manipulation :
> 
> \begin{verbatim}
> ==============================================================================
> 
>   using namespace vcsn;
>   using namespace algebra;
>   using namespace small_alpha_letter;
>   
>   using std::cout;
>   using std::endl;
>   
>   Alphabet A;
>   
>   Letter a('a');
>   
>   A.insert(a);
>   A.insert(Letter('b'));
>   
>   cout << "Size of alphabet : "
>        << A.size() << endl;                // return 2
>   
>   
>   cout << "Is \'a\' inside alphabet ? (0 or 1) : "
>        << A.contains('a') << endl;         //return true
> 
>   cout << "Is \'1\' inside alphabet ? (0 or 1) : "
>        << A.contains('1') << endl;         //return false
>   
>   
>   cout << "element of alphabet are : ";
>   for (Alphabet::iterator i = A.begin(); i != A.end(); i++)
>     cout << *i << " ";
>   cout << endl;
>   
>   cout << "random sequence of 10 symbols of alphabet : ";
>   for (unsigned i = 0; i < 10; i++)
>     cout << A.choose() << " ";
>   cout << endl;
>        
> ==============================================================================
> \end{verbatim}
> 
220a333,336
> Now we use an algebraic structure called a free moinoid. It is the set of
> words we can represent with an alphabet (a collection of symbols) and
> a specific operation. 
> 
