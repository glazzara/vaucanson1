<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://vaucanson.lrde.epita.fr"
xmlns="http://vaucanson.lrde.epita.fr"
elementFormDefault="qualified">

<!--
vaucanson.xsd version 0.4
-->

<!--
 The following tags are used for the <expressionLabel> tag.
-->

<!--
 Attribute group used for node expressions.
-->
 <xs:attributeGroup name="nodeAttributes">
   <xs:attribute name="leftWeight" type="xs:string"/>
   <xs:attribute name="rightWeight" type="xs:string"/>
 </xs:attributeGroup>

<!--
 Attribute group used for the terminal tags of the expression grammar.
-->
 <xs:attributeGroup name="atomAttributes">
   <xs:attribute name="weight" type="xs:string"/>
 </xs:attributeGroup>

<!--
 Terminal tags of the expression grammar.
-->
<xs:complexType name="atom">
   <xs:attribute name="value" type="xs:string" use="required"/>
   <xs:attributeGroup ref="atomAttributes"/>
 </xs:complexType>

<xs:complexType name="zeroVal">
</xs:complexType>

<xs:complexType name="identityVal">
   <xs:attributeGroup ref="atomAttributes"/>
</xs:complexType>

<!--
 <star> tag properties. Used to add a star in the regular expression.
 The members of a star can be any tag out of the <product>, <sum>, <star>,
 <zero>, <identity> and <word> ones, defined in the <ExpressionLabelGroup>
 group.
-->
<xs:complexType name="star">
  <xs:group ref="expressionLabelGroup"/>
  <xs:attributeGroup ref="nodeAttributes"/>
</xs:complexType>

<!--
 <sum> tag properties. Used to represent a sum in the regular expression.
 The members of a sum can be any tag out of those defined in the
 <ExpressionLabelGroup> group.
-->
<xs:complexType name="sum">
   <xs:sequence minOccurs="2" maxOccurs="2">
     <xs:group ref="expressionLabelGroup"/>
   </xs:sequence>
   <xs:attributeGroup ref="nodeAttributes"/>
</xs:complexType>

<!--
 <product> tag properties. Used to represent a product in the regular expression.
 The members of a product can be any tag out of those defined in the
 <ExpressionLabelGroup> group.
-->
<xs:complexType name="product">
   <xs:sequence minOccurs="2" maxOccurs="2">
     <xs:group ref="expressionLabelGroup"/>
   </xs:sequence>
   <xs:attributeGroup ref="nodeAttributes"/>
</xs:complexType>

<!--
 <expressionLabel> tag properties. Used to clearly define the content of a
label by using <product>, <sum>, <zero>, <identity> and <word> tags.
-->
<xs:group name="expressionLabelGroup">
  <xs:choice>
    <xs:element name="star" type="star"/>
    <xs:element name="word" type="atom"/>
    <xs:element name="sum" type="sum"/>
    <xs:element name="product" type="product"/>
    <xs:element name="zero" type="zeroVal"/>
    <xs:element name="identity" type="identityVal"/>
  </xs:choice>
</xs:group>

<xs:complexType name="expressionLabel">
  <xs:group ref="expressionLabelGroup"/>

</xs:complexType>


<!--
<geometry> tag properties. Used to set the geometry properties of each
element.
- Appened to <state> node : x, y set position.
- Appened to <transition> node :
  * transitionType sets the type of the transition (line, arcL, arcR, curve,
  loop).
  * loopDirection sets the direction of the loop if it is selected.
  * labelPosition sets the position of the label on the position. Values are
  between 0 (near the origin state) and 100 (near the destination state).
- Appened to <initial> or <final> node :
  * typeshowing sets the vizualisation type of the initial/final state: circled
  or with a transition.
  * transitionAngle sets the direction of the transition if typeShowing is set
  to `arrow'.
  * labelPosition sets the position of the label on the position. Values are
  between 0 (near the origin state) and 100 (near the destination state).
- Appended to <automaton> node : x, y set the global offset.
-->

<!--
This type is divided in four parts, since different attributes must be used
at different places of the automaton description.
-->
<xs:complexType name="geometryState">
  <xs:attribute name="x" type="xs:decimal"/>
  <xs:attribute name="y" type="xs:decimal"/>
</xs:complexType>

<xs:complexType name="geometryTrans">
  <xs:attribute name="transitionType">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="line|arcL|arcR|curve|loop"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="loopDirection">
    <xs:simpleType>
      <xs:restriction base="xs:decimal">
	<xs:minInclusive value="0"/>
	<xs:maxExclusive value="360"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="labelPosition">
    <xs:simpleType>
      <xs:restriction base="xs:decimal">
	<xs:minInclusive value="0"/>
	<xs:maxInclusive value="100"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
</xs:complexType>

<xs:complexType name="geometryInitFinal">
  <xs:attribute name="typeShowing">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="circle|arrow"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="transitionAngle">
    <xs:simpleType>
      <xs:restriction base="xs:decimal">
	<xs:minInclusive value="0"/>
	<xs:maxExclusive value="360"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="labelPosition">
    <xs:simpleType>
      <xs:restriction base="xs:decimal">
	<xs:minInclusive value="0"/>
	<xs:maxInclusive value="100"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
</xs:complexType>

<xs:complexType name="geometryGlobal">
  <xs:attribute name="x" type="xs:decimal"/>
  <xs:attribute name="y" type="xs:decimal"/>
  <xs:attribute name="orientation" type="xs:decimal"/>
</xs:complexType>



<!--
<drawing> tag properties. Used to define useful properties that can be
used for XML to latex translation. The entire list of possible attributes is
very long, the following ones are given as examples.

An optional "any" attribute is used, to let the user use personal attributes.
-->
<xs:complexType name="drawing" mixed="true">
  <xs:attribute name="stateFillColor" type="xs:string"/>
  <xs:attribute name="stateLabelColor" type="xs:string"/>
  <xs:attribute name="stateLineWidth" type="xs:string"/>
  <xs:attribute name="stateLineStyle">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="solid|dashed|dotted|none"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="arcAngle" type="xs:decimal"/>
  <xs:anyAttribute/>
</xs:complexType>


<!--
<semiring> tag properties. Used to define the semiring of the
automaton. This tag can be used to define a set, and operations on
it.

The default semiring is Boolean.
-->
<xs:complexType name="semiring">
  <xs:attribute name="set" default="B">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="B|N|Z|Q|R"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="operations" default="classical">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="classical|minPlus|maxPlus|minMax"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
</xs:complexType>

<!--
numericalSemiring is used to enable recursive construction of complex structures
with monoids and semirings.
-->
<xs:complexType name="numericalSemiring">
  <xs:sequence>
    <xs:element name="monoid" type="monoid" minOccurs="0"/>
    <xs:choice>
      <xs:element name="semiring" type="semiring" minOccurs="0"/>
      <xs:element name="numericalSemiring" type="numericalSemiring" minOccurs="0"/>
    </xs:choice>
  </xs:sequence>
</xs:complexType>


<!--
<monoid> tag properties. Used to define all the monoid(s) properties
of the automaton.
A monoid expects <generator> tags to define its generators, when available.
The <monoid> tag can be recursively constructed to build n-product of monoid.

Default is free monoid, with the alphabet letters.
FIXME: generator should be broken into two elements so as to allow a default
value.
-->
<xs:complexType name="generator">
  <xs:attribute name="value" type="xs:string"/>
</xs:complexType>

<xs:complexType name="monoid">
  <xs:choice>
    <xs:element name="monoid" type="monoid" minOccurs="0" maxOccurs="unbounded"/>
    <xs:element name="generator" type="generator" minOccurs="0" maxOccurs="unbounded"/>
  </xs:choice>
  <xs:attribute name="type" default="free">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="unit|free|product"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="generatorType" default="letters">
    <xs:simpleType>
      <xs:restriction base="xs:string">
	<xs:pattern value="letters|digits|pair|indexed"/>
      </xs:restriction>
      </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="identitySymbol" type="xs:string"/>
</xs:complexType>

<!--
<labelType> tag properties. This tag encapsulates semiring and monoid
definitions to entirely define the algebraic structure the automaton
is working on. This tag is optionnal if you want to use
default values. You can specify only one of the monoid / semiring tag,
if necessary.
-->
<xs:complexType name="typeAutomaton">
  <xs:sequence>
    <xs:element name="monoid" type="monoid"/>
    <xs:choice>
      <xs:element name="semiring" type="semiring"/>
      <xs:element name="numericalSemiring" type="numericalSemiring"/>
    </xs:choice>
  </xs:sequence>
</xs:complexType>

<!--
<session> tag properties. This tag is used to encapsulate many
automata in a single XML file.
The session can be named using the "name" attribute. Global offset can
be set using the <geometry> tag, and global drawing properties can be
set using the <drawing> tag.
-->
<xs:element name="session">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="automaton" type="automaton" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="geometry" type="geometryGlobal" minOccurs="0"/>
      <xs:element name="drawing" type="drawing" minOccurs="0"/>
    </xs:sequence>
  <xs:attribute name="name" type="xs:string"/>
  </xs:complexType>
</xs:element>


<!--
<state> tag properties. Used to define a state in the automaton.
This tag must be a child of <states> tag.
The "name" attribute is required, the other are optional. Use the
"number" attribute to set an order on states.
State position can be set using the <geometry> tag, and drawing
properties can be set with the <drawing> tag.
-->
<xs:complexType name="state">
  <xs:sequence>
    <xs:element name="geometry" type="geometryState" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
    <xs:element name="label" type="expressionLabel" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="xs:string" use="required"/>
  <xs:attribute name="label" type="xs:string"/>
  <xs:attribute name="number" type="xs:integer"/>
</xs:complexType>


<!--
<transition> tag properties. Used to define a transition between two
states . This tag must be a child of <transitions> tag.
The optional "weight" attribute can be used on weighted automata.
For transducers, use the "in" and "out" attributes to define input and
output for the transition.
Transition type can be defined using the <geometry> tag, and drawing properties can
be set with the <drawing> tag.

When unspecified, the unlabeled transition should be considered
labeled with the identity on the monoid.
-->
<xs:complexType name="transition">
  <xs:sequence>
    <xs:element name="geometry" type="geometryTrans" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
    <xs:element name="label" type="expressionLabel" minOccurs="0"/>
    <xs:element name="in" type="expressionLabel" minOccurs="0"/>
    <xs:element name="out" type="expressionLabel" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="src" type="xs:string" use="required"/>
  <xs:attribute name="dst" type="xs:string" use="required"/>
  <xs:attribute name="name" type="xs:string"/>
  <xs:attribute name="label" type="xs:string"/>
  <xs:attribute name="weight" type="xs:string"/>
  <xs:attribute name="in" type="xs:string"/>
  <xs:attribute name="out" type="xs:string"/>
</xs:complexType>


<!--
<states> tag properties. Used to enumerate states in the automaton.
Global geometry and drawing properties can be set for all states.
-->
<xs:complexType name="states">
  <xs:sequence>
    <xs:element name="state" type="state" minOccurs="0" maxOccurs="unbounded"/>
    <xs:element name="geometry" type="geometryState" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
  </xs:sequence>
</xs:complexType>


<!--
<transitions> tag properties. Used to enumerate transitions in the
automaton, including initials and finals.
Global geometry and drawing properties can be set for all transitions.
-->
<xs:complexType name="transitions">
  <xs:sequence>
    <xs:element name="transition" type="transition" minOccurs="0" maxOccurs="unbounded"/>
    <xs:element name="initial" type="initial" minOccurs="0" maxOccurs="unbounded"/>
    <xs:element name="final" type="final" minOccurs="0" maxOccurs="unbounded"/>
    <xs:element name="geometry" type="geometryTrans" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
  </xs:sequence>
</xs:complexType>


<!--
<initial> tag properties. Used to set a state as initial state. This
tag must be a child of <initials> tag.
Geometry can be defined (the orientation of the initial transition),
and drawing properties.
-->
<xs:complexType name="initial">
  <xs:sequence>
    <xs:element name="geometry" type="geometryInitFinal" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
    <xs:element name="label" type="expressionLabel" minOccurs="0"/>
    <xs:element name="in" type="expressionLabel" minOccurs="0"/>
    <xs:element name="out" type="expressionLabel" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="state" type="xs:string" use="required"/>
  <xs:attribute name="label" type="xs:string"/>
  <xs:attribute name="weight" type="xs:string"/>
  <xs:attribute name="in" type="xs:string"/>
  <xs:attribute name="out" type="xs:string"/>
</xs:complexType>


<!--
<final> tag properties. Same as below, on final states.
-->
<xs:complexType name="final">
  <xs:sequence>
    <xs:element name="geometry" type="geometryInitFinal" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
    <xs:element name="label" type="expressionLabel" minOccurs="0"/>
    <xs:element name="in" type="expressionLabel" minOccurs="0"/>
    <xs:element name="out" type="expressionLabel" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="state" type="xs:string" use="required"/>
  <xs:attribute name="label" type="xs:string"/>
  <xs:attribute name="weight" type="xs:string"/>
  <xs:attribute name="in" type="xs:string"/>
  <xs:attribute name="out" type="xs:string"/>
</xs:complexType>


<!--
<content> tag properties. This tag is used to define the structure of
the automaton. It's a combination of <states>, <transitions>,
<initials> and <finals> tags. None of them are optional, and the order
is constrained.
-->
<xs:complexType name="contentAutomaton">
  <xs:sequence>
    <xs:element name="geometry" type="geometryGlobal" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
    <xs:element name="states" type="states"/>
    <xs:element name="transitions" type="transitions"/>
  </xs:sequence>
</xs:complexType>


<!--
<automaton> tag properties. It can be the root of the document, or a
child of the <session> tag. Global geometry and drawing properties can
be set.
-->
<xs:complexType name="automaton">
  <xs:sequence>
    <xs:element name="labelType" type="typeAutomaton"/>
    <xs:element name="content" type="contentAutomaton"/>
    <xs:element name="geometry" type="geometryGlobal" minOccurs="0"/>
    <xs:element name="drawing" type="drawing" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="name" type="xs:string"/>
</xs:complexType>

<xs:element name="automaton" type="automaton"/>

</xs:schema>
