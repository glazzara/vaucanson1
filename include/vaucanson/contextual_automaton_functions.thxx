//								-*- c++ -*-
// contextual_automaton_functions.thxx: this file is part of the Vaucanson
// project.
//
// Vaucanson, a generic library for finite state machines.
// Copyright (C) 2004 The Vaucanson Group.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Vaucanson Group represents the following contributors:
//    * Jacques Sakarovitch <sakarovitch@enst.fr>
//    * Sylvain Lombardy <lombardy@liafa.jussieu.fr>
//    * Thomas Claveirole <thomas.claveirole@lrde.epita.fr>
//    * Loic Fosse <loic.fosse@lrde.epita.fr>
//    * Thanh-Hoc Nguyen <nguyen@enst.fr>
//    * Raphael Poss <raphael.poss@lrde.epita.fr>
//    * Yann Regis-Gianas <yann.regis-gianas@lrde.epita.fr>
//    * Maxime Rey <maxime.rey@lrde.epita.fr>
//    * Sarah O'Connor <sarah.o-connor@lrde.epita.fr>
//    * Louis-Noel Pouchet <louis-noel.pouchet@lrde.epita.fr>
//

/*----------------.
| new_automaton() |
`----------------*/

template <class InputIterator>
automata_set_t new_automata_set(InputIterator begin,
				InputIterator end)
{
  alphabet_t		alpha;
  for (InputIterator e = begin; e != end; ++e)
    alpha.insert(*e);
  semiring_t		semiring;
  monoid_t		freemonoid (alpha);
  series_set_t		series (semiring, freemonoid);
  return automata_set_t	(series);
}

template <class InputIterator>
automaton_t new_automaton(InputIterator begin,
			  InputIterator end)
{
  return automaton_t (new_automata_set(begin, end));
}

template <class T>
automaton_t new_automaton(const T& alphabet)
{
  return new_automaton(alphabet.begin(), alphabet.end());
}

template <class InputIterator>
gen_automaton_t new_gen_automaton(InputIterator begin,
				  InputIterator end)
{
  return gen_automaton_t (new_automata_set(begin, end));
}

template <class T>
gen_automaton_t new_gen_automaton(const T& alphabet)
{
  return new_gen_automaton(alphabet.begin(), alphabet.end());
}


/*--------------.
| new_rat_exp() |
`--------------*/

template <class Iterator>
rat_exp_t new_rat_exp(const Iterator& begin,
		      const Iterator& end,
		      const std::string& exp)
{
  alphabet_t	alphabet;
  for (Iterator i = begin; i != end; ++i)
    alphabet.insert(*i);
  monoid_t	monoid (alphabet);
  semiring_t	semiring;
  series_set_t	series (semiring, monoid);

  rat_exp_t	r (series);
  std::pair<bool, std::string> p = parse(exp, r);
  if (p.first)
    throw std::invalid_argument (p.second);
  return r;
}

template <class T>
rat_exp_t new_rat_exp(const T& alphabet, const std::string& exp)
{
  return new_rat_exp(alphabet.begin(), alphabet.end(), exp);
}

/*--------------.
| standard_of() |
`--------------*/

template <class SeriesImpl>
automaton_t
do_standard_of(const series_set_t& structure, const SeriesImpl& impl)
{
  automaton_t r = new_automaton(structure.monoid().alphabet());
  standard_of(r, impl);
  return r;
}

template <class SeriesSet, class SeriesImpl>
automaton_t
standard_of(const Element<SeriesSet, SeriesImpl>& e)
{
  return do_standard_of(e.structure(), e.value());
}

/*--------------.
| thompson_of() |
`--------------*/

template <class SeriesImpl>
automaton_t
do_thompson_of(const series_set_t& structure, const SeriesImpl& impl)
{
  automaton_t r = new_automaton(structure.monoid().alphabet());
  thompson_of(r, impl);
  return r;
}

template <class SeriesSet, class SeriesImpl>
automaton_t
thompson_of(const Element<SeriesSet, SeriesImpl>& e)
{
  return do_thompson_of(e.structure(), e.value());
}

/*-------------.
| aut_to_exp() |
`-------------*/

inline
rat_exp_t
aut_to_exp(const automaton_t& a)
{
  return aut_to_exp(generalized(a));
}

template <class Chooser>
rat_exp_t
aut_to_exp(const automaton_t& a, const Chooser& c)
{
  return aut_to_exp(generalized(a), c);
}
