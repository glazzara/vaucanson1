// automaton_functions.thh: this file is part of the Vaucanson project.
// 
// Vaucanson, a generic library for finite state machines.
// 
// Copyright (C) 2004, 2005 The Vaucanson Group.
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// The complete GNU General Public Licence Notice can be found as the
// `NOTICE' file in the root directory.
// 
// The Vaucanson Group consists of people listed in the `AUTHORS' file.
//
# include <vaucanson/automata/implementation/generalized.hh>

# include <vaucanson/tools/dot_dump.hh>
# include <vaucanson/tools/usual_macros.hh>

# ifndef VCSN_WITHOUT_ALGORITHM_INCLUDES
#  include <vaucanson/algorithms/derived_terms_automaton.hh>
#  include <vaucanson/algorithms/product.hh>
#  include <vaucanson/algorithms/transpose.hh>
#  include <vaucanson/algorithms/eval.hh>
#  include <vaucanson/algorithms/determinize.hh>
#  include <vaucanson/algorithms/closure.hh>
#  include <vaucanson/algorithms/minimization_hopcroft.hh>
#  include <vaucanson/algorithms/minimization_moore.hh>
#  include <vaucanson/algorithms/trim.hh>
#  include <vaucanson/algorithms/concatenate.hh>
#  include <vaucanson/algorithms/sum.hh>
#  include <vaucanson/algorithms/krat_exp_expand.hh>
#  include <vaucanson/algorithms/accessible.hh>
#  include <vaucanson/algorithms/realtime.hh>
#  include <vaucanson/algorithms/standard.hh>
#  include <vaucanson/algorithms/normalized.hh>
# endif // ! VCSN_WITHOUT_ALGORITHM_INCLUDES

# include <vaucanson/algorithms/standard_of.hh>
# include <vaucanson/algorithms/thompson.hh>
# include <vaucanson/algorithms/aut_to_exp.hh>

namespace vcsn
{

  namespace VCSN_CONTEXT_NAMESPACE
  {


    template <class T>
    automaton_t new_automaton(const T& alphabet);

    template <class InputIterator>
    automaton_t new_automaton(InputIterator begin,
			      InputIterator end);

    template <class T>
    gen_automaton_t new_gen_automaton(const T& alphabet);

    template <class InputIterator>
    gen_automaton_t new_gen_automaton(InputIterator begin,
				      InputIterator end);

    template <class Iterator>
    rat_exp_t
    new_rat_exp(const Iterator& begin,
		const Iterator& end,
		const std::string& exp = "0");

    template <class T>
    rat_exp_t
    new_rat_exp(const T& alphabet, const std::string& exp = "0");

    template <class SeriesSet, class SeriesImpl>
    automaton_t
    standard_of(const Element<SeriesSet, SeriesImpl>& e);


    template <class SeriesSet, class SeriesImpl>
    automaton_t
    thompson_of(const Element<SeriesSet, SeriesImpl>& e);

    rat_exp_t
    aut_to_exp(const automaton_t& a);

    template <class Chooser>
    rat_exp_t
    aut_to_exp(const automaton_t& a, const Chooser& c);


  } // End of namespace VCSN_CONTEXT_NAMESPACE.

} // End of namespace vcsn.

# ifndef VCSN_USE_INTERFACE_ONLY
#  include <vaucanson/contexts/automaton_functions.thxx>
#endif // ! VCSN_CONTEXTS_AUTOMATON_FUNCTIONS_THH
