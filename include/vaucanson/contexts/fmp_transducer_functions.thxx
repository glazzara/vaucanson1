//								-*- c++ -*-
// fmp_transducer_functions.thxx: this file is part of the Vaucanson project.
//
// Vaucanson, a generic library for finite state machines.
// Copyright (C) 2005 The Vaucanson Group.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The Vaucanson Group represents the following contributors:
//    * Jacques Sakarovitch <sakarovitch@enst.fr>
//    * Sylvain Lombardy <lombardy@liafa.jussieu.fr>
//    * Thomas Claveirole <thomas.claveirole@lrde.epita.fr>
//    * Loic Fosse <loic.fosse@lrde.epita.fr>
//    * Thanh-Hoc Nguyen <nguyen@enst.fr>
//    * Raphael Poss <raphael.poss@lrde.epita.fr>
//    * Yann Regis-Gianas <yann.regis-gianas@lrde.epita.fr>
//    * Maxime Rey <maxime.rey@lrde.epita.fr>
//    * Sarah O'Connor <sarah.o-connor@lrde.epita.fr>
//    * Louis-Noel Pouchet <louis-noel.pouchet@lrde.epita.fr>
//

# include <vaucanson/algorithms/evaluation_fmp.hh>
# include <vaucanson/algorithms/minimization_hopcroft.hh>
# include <vaucanson/algorithms/aut_to_exp.hh>
# include <vaucanson/algorithms/trim.hh>
# include <vaucanson/algorithms/realtime.hh>

namespace vcsn
{
  namespace VCSN_CONTEXT_NAMESPACE
  {

    template <class FirstInputIterator, class SecondInputIterator>
    automata_set_t new_automata_set(const FirstInputIterator first_begin,
				    const FirstInputIterator first_end,
				    const SecondInputIterator second_begin,
				    const SecondInputIterator second_end)
    {
      first_alphabet_t		first_alpha;
      for (FirstInputIterator e = first_begin; e != first_end; ++e)
	first_alpha.insert(*e);

      second_alphabet_t		second_alpha;
      for (SecondInputIterator e = second_begin; e != second_end; ++e)
	second_alpha.insert(*e);

      semiring_t		semiring;
      monoid_t			freemonoidproduct (first_alpha, second_alpha);
      series_set_t		series (semiring, freemonoidproduct);
      return automata_set_t	(series);
    }


    template <class FirstInputIterator, class SecondInputIterator>
    automaton_t new_automaton(const FirstInputIterator first_begin,
			      const FirstInputIterator first_end,
			      const SecondInputIterator second_begin,
			      const SecondInputIterator second_end)
    {
      return automaton_t (new_automata_set(first_begin, first_end,
					   second_begin, second_end));
    }

    template <class T1, class T2>
    automaton_t new_automaton(const T1& first_alphabet,
			      const T2& second_alphabet)
    {
      return new_automaton(first_alphabet.begin(), first_alphabet.end(),
			   second_alphabet.begin(), second_alphabet.end());
    }

    template <class FirstIterator, class SecondIterator>
    monoid_elt_t make_couple(const FirstIterator first_begin,
			     const FirstIterator first_end,
			     const SecondIterator second_begin,
			     const SecondIterator second_end,
			     const std::string& first_exp,
			     const std::string& second_exp)
    {
      first_alphabet_t		first_alpha;
      for (FirstIterator e = first_begin; e != first_end; ++e)
	first_alpha.insert(*e);

      second_alphabet_t		second_alpha;
      for (SecondIterator e = second_begin; e != second_end; ++e)
	second_alpha.insert(*e);

      monoid_t			fmp (first_alpha, second_alpha);

      monoid_elt_value_t	fmp_elt_value (first_exp, second_exp);
      return Element<monoid_t, monoid_elt_value_t> (fmp, fmp_elt_value);
    }

    template <class T1, class T2>
    monoid_elt_t make_couple(const T1& first_alphabet,
			     const T2& second_alphabet,
			     const std::string& first_exp,
			     const std::string& second_exp)
    {
      return make_couple(first_alphabet.begin(), first_alphabet.end(),
			 second_alphabet.begin(), second_alphabet.end(),
			 first_exp, second_exp);
    }


    template <typename TransStruct,
	      typename TransImpl,
	      typename SeriesStruct,
	      typename SeriesImpl,
	      typename S,
	      typename T>
    AUTOMATON_CONTEXT::rat_exp_t
    do_evaluation(const vcsn::AutomataBase<TransStruct>&,
		  const TransImpl&,
		  const SeriesStruct&,
		  const vcsn::rat::exp<S, T>& input,
		  const Element<TransStruct, TransImpl>& t,
		  const Element<SeriesStruct, SeriesImpl>&)
    {
      AUTOMATON_CONTEXT::automaton_t w = AUTOMATON_CONTEXT::
	new_automaton(t.structure().series()
		      .monoid().first_monoid().alphabet());
      AUTOMATON_CONTEXT::automaton_t result = AUTOMATON_CONTEXT::
	new_automaton(t.structure().series()
		      .monoid().second_monoid().alphabet());
      standard_of(w, input);
      evaluation_fmp(t, quotient(w), result);
      return aut_to_exp(generalized(quotient(realtime(trim(result)))),
			DMChooser());
    }


    template <typename TransStruct,
	      typename TransImpl,
	      typename ArgStruct,
	      typename ArgImpl>
    AUTOMATON_CONTEXT::rat_exp_t
    evaluation(const Element<TransStruct, TransImpl>& t,
	       const Element<ArgStruct, ArgImpl>& input)
    {
      return do_evaluation(t.structure(), t.value(),
			   input.structure(), input.value(),
			   t, input);
    }


  } // End of namespace VCSN_CONTEXT_NAMESPACE.
} // End of namespace vcsn.
